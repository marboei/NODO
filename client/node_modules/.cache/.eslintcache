[{"/home/marboi/Work/dotnet/NoDo/client/src/index.js":"1","/home/marboi/Work/dotnet/NoDo/client/src/App.js":"2","/home/marboi/Work/dotnet/NoDo/client/src/Components/Column.jsx":"3","/home/marboi/Work/dotnet/NoDo/client/src/Components/Task.jsx":"4","/home/marboi/Work/dotnet/NoDo/client/src/Data/agent.js":"5","/home/marboi/Work/dotnet/NoDo/client/src/Pages/LoginPage.jsx":"6","/home/marboi/Work/dotnet/NoDo/client/src/Pages/RegisterPage.jsx":"7","/home/marboi/Work/dotnet/NoDo/client/src/Components/Toolbar.jsx":"8","/home/marboi/Work/dotnet/NoDo/client/src/store/configureStore.js":"9","/home/marboi/Work/dotnet/NoDo/client/src/store/Slices/projectsSlice.js":"10","/home/marboi/Work/dotnet/NoDo/client/src/store/Slices/columnsSlice.js":"11","/home/marboi/Work/dotnet/NoDo/client/src/store/Slices/userSlice.js":"12","/home/marboi/Work/dotnet/NoDo/client/src/Components/CardDemo.jsx":"13","/home/marboi/Work/dotnet/NoDo/client/src/Utils/stringAvatar.js":"14","/home/marboi/Work/dotnet/NoDo/client/src/Components/Comment.jsx":"15","/home/marboi/Work/dotnet/NoDo/client/src/Components/TaskDetails.jsx":"16","/home/marboi/Work/dotnet/NoDo/client/src/store/Slices/taskSlice.js":"17","/home/marboi/Work/dotnet/NoDo/client/src/store/Slices/uselessSlice.js":"18","/home/marboi/Work/dotnet/NoDo/client/src/Components/LabelsEdit.jsx":"19","/home/marboi/Work/dotnet/NoDo/client/src/store/Slices/commentsSlice.js":"20","/home/marboi/Work/dotnet/NoDo/client/src/Components/CardPreview.jsx":"21","/home/marboi/Work/dotnet/NoDo/client/src/Components/Members.jsx":"22","/home/marboi/Work/dotnet/NoDo/client/src/Components/MembersEdit.jsx":"23","/home/marboi/Work/dotnet/NoDo/client/src/Components/SearchUsers.jsx":"24","/home/marboi/Work/dotnet/NoDo/client/src/Components/SearchMembers.jsx":"25","/home/marboi/Work/dotnet/NoDo/client/src/Pages/ProjectPage.jsx":"26","/home/marboi/Work/dotnet/NoDo/client/src/Pages/ViewPage.jsx":"27"},{"size":361,"mtime":1647990031304,"results":"28","hashOfConfig":"29"},{"size":1594,"mtime":1651555586099,"results":"30","hashOfConfig":"29"},{"size":9765,"mtime":1651192715289,"results":"31","hashOfConfig":"29"},{"size":4347,"mtime":1651539729596,"results":"32","hashOfConfig":"29"},{"size":7279,"mtime":1651553517720,"results":"33","hashOfConfig":"29"},{"size":6050,"mtime":1651557668762,"results":"34","hashOfConfig":"29"},{"size":8615,"mtime":1651557787608,"results":"35","hashOfConfig":"29"},{"size":8434,"mtime":1651452337067,"results":"36","hashOfConfig":"29"},{"size":640,"mtime":1650059220635,"results":"37","hashOfConfig":"29"},{"size":624,"mtime":1649229539257,"results":"38","hashOfConfig":"29"},{"size":1284,"mtime":1649315948419,"results":"39","hashOfConfig":"29"},{"size":365,"mtime":1648056387520,"results":"40","hashOfConfig":"29"},{"size":4989,"mtime":1648431389649,"results":"41","hashOfConfig":"42"},{"size":649,"mtime":1651105452202,"results":"43","hashOfConfig":"29"},{"size":4191,"mtime":1651543582526,"results":"44","hashOfConfig":"29"},{"size":24259,"mtime":1651555135138,"results":"45","hashOfConfig":"29"},{"size":319,"mtime":1648963638340,"results":"46","hashOfConfig":"29"},{"size":312,"mtime":1649244827540,"results":"47","hashOfConfig":"29"},{"size":3432,"mtime":1651538448141,"results":"48","hashOfConfig":"29"},{"size":347,"mtime":1650059220629,"results":"49","hashOfConfig":"29"},{"size":2754,"mtime":1651451872470,"results":"50","hashOfConfig":"29"},{"size":5578,"mtime":1651558864116,"results":"51","hashOfConfig":"29"},{"size":3556,"mtime":1651448171367,"results":"52","hashOfConfig":"29"},{"size":3753,"mtime":1651441990806,"results":"53","hashOfConfig":"29"},{"size":3474,"mtime":1651554612898,"results":"54","hashOfConfig":"29"},{"size":6746,"mtime":1651558925179,"results":"55","hashOfConfig":"29"},{"size":4952,"mtime":1651456291684,"results":"56","hashOfConfig":"29"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z6c00r",{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"o4fkfz",{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},"/home/marboi/Work/dotnet/NoDo/client/src/index.js",[],[],"/home/marboi/Work/dotnet/NoDo/client/src/App.js",[],[],"/home/marboi/Work/dotnet/NoDo/client/src/Components/Column.jsx",["153","154","155","156"],[],"\nimport * as React from 'react';\nimport {\n    Card,\n    CardContent, ClickAwayListener, Collapse, Fab, Grid, IconButton,\n    TextField,\n    Typography\n} from \"@mui/material\";\nimport {Task} from \"./Task\";\nimport {useEffect, useState} from \"react\";\nimport agent from \"../Data/agent\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport {useDrag, useDrop} from \"react-dnd\";\nimport { TransitionGroup } from 'react-transition-group';\nimport Box from \"@mui/material/Box\";\nimport CloseIcon from '@mui/icons-material/Close';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setColumns} from \"../store/Slices/columnsSlice\";\n\n\n\n\nexport const Column = ({column, handleDeleteColumn, updateColumn , projectId}) => {\n    \n    const dispatch = useDispatch()\n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState('');\n    const [columnClicked, setColumnClicked] = useState(false);\n    const [updatedColumn, setUpdatedColumn] = useState(column);\n    const [dropped, setDropped] = useState(false);\n    const [addTaskClicked, setAddTaskClicked] = useState(false)\n    const {task} = useSelector(state => state.task)\n    const {columns} = useSelector(state => state.columns)\n\n    \n    const [{}, drop] = useDrop(() => ({\n        accept: \"task\",\n        drop: async (item) => {\n            if(item.columnId !== column.id) {\n                await addTaskToColumn(item.id, item.columnId, item.title)\n            }\n            \n        }\n    }))\n\n    const [{}, dropp] = useDrop(() => ({\n        accept: \"column\",\n        drop: async (item) => {\n            let draggedColumn = await agent.column.getById(projectId, item.id)\n            let droppedColumn = await agent.column.getById(projectId, column.id)\n            await agent.column.update(projectId,column.id, {order: draggedColumn.order})\n            await agent.column.update(projectId,item.id, {order: droppedColumn.order})\n            let newColumns = await agent.column.getAll(projectId)\n            dispatch(setColumns(newColumns))\n        }\n    }))\n\n    const [{monitor}, drag] = useDrag(() => ({\n        type: \"column\",\n        item: {id: column.id, title: column.title, order: column.order},\n        collect: (monitor) => ({\n            monitor: monitor\n        })/*,\n        end: (item) => {\n            if(monitor.getDropResult()) removeTaskAfterDrag(item.id, item.columnId, item.order)\n        }*/\n    }))\n    \n    \n    \n    \n    \n    \n    //fetches tasks from db according to it's column and stores them in tasks state\n    useEffect(  () => {\n        async function fetchProjects() {\n            setTasks(await agent.task.getAll(projectId, column.id))\n            setDropped(false)\n            setAddTaskClicked(false)\n        }\n        fetchProjects()\n\n\n    },[task,column.id, dropped, columns, column])\n\n    const addTaskToColumn = async (id, columnId, title) => {\n        const thisTasks = await agent.task.getAll(projectId, column.id)\n        let tasksLength = thisTasks.length;\n        const addedTask = await agent.task.update(projectId, columnId, id, {title: title, columnId: column.id, order: tasksLength + 1})\n        const tusks = tasks\n        tusks.push(addedTask)\n        setTasks(tusks)\n        setDropped(true)\n    }\n    \n    //handles task deletion\n    //>passes this function to child component(Task) to take an individual task id as a parameter\n    const handleDelete = async (id) => {\n        /*let newTasks = tasks.filter((task) => task.id !== id)*/\n        const deletedTask = await agent.task.delete(projectId, column.id, id)\n        for (const task1 of tasks) {\n            if(task1.order > deletedTask.order){\n                await agent.task.update(projectId, column.id, task1.id, {order: task1.order - 1})\n            }\n        }\n        setTasks(await agent.task.getAll(projectId, column.id))\n    }\n    \n    //creates a new task after user submits the creation form\n    const handleNewTaskSubmit = async (e) => {\n        e.preventDefault();\n        setAddTaskClicked(false)\n        let tasksLength = tasks.length;\n        const addedTask = await agent.task.add(projectId, column.id, {title: newTask, order: tasksLength ? tasksLength + 1 : 1})\n        setTasks([...tasks, addedTask])\n        \n        \n        e.target.value = ''\n        setNewTask('')\n        \n    }\n    \n    \n    //updates existing task and passes the function to child component(Task) to take as a parameter the existing task id and the updated task\n    const updateTask = async (updatedTask, id) => {\n        let updatedTasks = tasks\n        updatedTasks.forEach((task) => {\n            if (task.id === updatedTask.id) task.title = updatedTask.title\n        })\n        setTasks(updatedTasks)\n        await agent.task.update(projectId, column.id, id, updatedTask)\n    }\n\n    //changes the taskClicked state to true if a task is clicked \n    const handleColumnClick = () => {\n        setColumnClicked(true)\n    };\n    //changes taskClicked state to false if user clicks outside of card\n    const handleClickAway = () => {\n        setColumnClicked(false);\n    };\n    //handles the updated task form when submitted\n    const handleColumnUpdateSubmit = async (e) => {\n        e.preventDefault();\n        //called from parent component(Column)\n        updateColumn(updatedColumn, column.id)\n        setColumnClicked(false);\n       \n    }\n    \n    const removeTaskAfterDrag = async (id, columnId, order) => {\n        if (columnId === column.id) {\n            const thisTasks = await agent.task.getAll(projectId, column.id)\n            for (const task1 of thisTasks) {\n                if(task1.order > order){\n                    await agent.task.update(projectId, column.id, task1.id, {order: task1.order - 1})\n                }\n            }\n            const updatedTasks = await agent.task.getAll(projectId, column.id)\n            setTasks(updatedTasks.filter(task => task.id !== id))\n        }\n\n    }\n    \n    return (\n        <div ref={dropp}>\n            {/*renders tasks inside column*/}\n            <Card sx={{ maxWidth: 400, margin: 4, bgcolor: '#ddd8c4', \"&:hover\": {\n                    border: '1px solid #545055'\n                }}} ref={drag}>\n                <CardContent  ref={drop}  sx={{whiteSpace: 'normal' }}>\n                    {\n                        columnClicked ? (\n                            <ClickAwayListener onClickAway={handleClickAway}>\n                                <form noValidate autoComplete=\"off\" onSubmit={handleColumnUpdateSubmit} >\n                                    <TextField\n                                        onChange={(e) => setUpdatedColumn({id: column.id, title: e.target.value})}\n                                        value={updatedColumn.title}  id=\"outlined-basic\" label=\"New task\" variant=\"outlined\" color='secondary' sx={{bgcolor: 'white'}} />\n                                </form>\n                            </ClickAwayListener>\n\n                        ) : (\n                        <Grid container>\n                        <Grid item xs={8}>\n                        <Typography variant='h6' onClick={handleColumnClick} >\n                    {column.title}\n                        </Typography>\n                        </Grid>\n\n                        <Grid item xs={4}>\n                        <IconButton aria-label=\"delete\" onClick={() => handleDeleteColumn(column.id)} >\n                        <DeleteIcon fontSize=\"small\"/>\n                        </IconButton>\n                        </Grid>\n                        </Grid>\n                        )\n                    }\n                    \n                    {/*renders all tasks*/}\n                    <TransitionGroup sx={{margin: '0px'}} >\n                        {tasks.map(task => (\n                            <Collapse key={task.id} {...({timeout: 800})}>\n                                <Task key={task.id} task={task} handleDelete={handleDelete} updateTask={updateTask} removeTaskAfterDrag={removeTaskAfterDrag}/>\n                            </Collapse>\n                            \n                        ))}\n                        <Collapse key={'add-button'}>\n                        {\n                            addTaskClicked ? (\n                                <form noValidate autoComplete=\"off\" onSubmit={handleNewTaskSubmit}>\n                                    <TextField onChange={(e) => setNewTask(e.target.value)}\n                                               value={newTask} id=\"outlined-basic\" label=\"New task\" variant=\"outlined\" sx={{bgcolor: 'white', marginLeft: '15px', marginRight: '1rem'}}/>\n                                </form>\n                            ) : (\n                               <></>\n                            )\n                        }\n                        </Collapse>\n                    </TransitionGroup>\n                    \n                    {/*renders new task form*/}\n                   \n                    <Box textAlign='center'>\n                        {\n                            addTaskClicked ? (\n                                <Fab size=\"small\"  aria-label=\"add\" sx={{marginTop: '8px'}} onClick={() => setAddTaskClicked(false)}>\n                                    <CloseIcon/>\n                                </Fab>\n                            ) : (\n                                <Fab size=\"small\" color=\"secondary\" aria-label=\"add\" sx={{marginTop: '4px', backgroundColor:'#948d95'}} onClick={() => setAddTaskClicked(true)}>\n                                    <AddIcon />\n                                </Fab>\n                            )\n                        }\n                        \n                    </Box>\n                    \n                </CardContent>\n            </Card>\n        </div>\n    );\n};","/home/marboi/Work/dotnet/NoDo/client/src/Components/Task.jsx",["157","158","159","160","161","162","163","164","165","166","167","168","169"],[],"\nimport * as React from 'react';\nimport {\n    Badge,\n    Grid,\n    IconButton,\n    Paper,\n    styled, Typography,\n} from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport {useEffect, useState} from \"react\";\nimport {useDrag, useDrop} from \"react-dnd\";\nimport {TaskDetails} from \"./TaskDetails\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setTask} from \"../store/Slices/taskSlice\";\nimport {useParams} from \"react-router-dom\";\nimport agent from \"../Data/agent\";\nimport {setComments} from \"../store/Slices/commentsSlice\";\nimport {setColumns} from \"../store/Slices/columnsSlice\";\nimport NotesIcon from \"@mui/icons-material/Notes\";\nimport ModeCommentOutlinedIcon from '@mui/icons-material/ModeCommentOutlined';\nimport LabelOutlinedIcon from '@mui/icons-material/LabelOutlined';\nimport GroupOutlinedIcon from '@mui/icons-material/GroupOutlined';\nimport {CardPreview} from \"./CardPreview\";\n\n//styling for task card\nconst Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    backgroundColor: \"#eeedde\",\n    textAlign: 'left',\n    lineHeight: '30px',\n    margin: '0px',\n    \n    wordWrap: 'break-word',\n    cursor: 'pointer',\n   \n        \"&:hover\": {\n            border: '1px solid #545055'\n        }\n}));\n\n\nexport const Task = ({task, handleDelete, handleUpdateTask, removeTaskAfterDrag}) => {\n    \n    const [taskClicked, setTaskClicked] = useState(false);\n    \n    const [updatedTask, setUpdatedTask] = useState(task);\n    \n    const {projectId} = useParams()\n    \n    const dispatch = useDispatch();\n    \n    const completed = task.completed ? 'completed' : ''\n    \n    \n    const [{monitor}, drag] = useDrag(() => ({\n        type: \"task\",\n        item: {id: task.id, columnId: task.columnId, title: task.title, order: task.order},\n        collect: (monitor) => ({\n            monitor: monitor\n        }),\n        end: (item) => {\n            if(monitor.getDropResult()) removeTaskAfterDrag(item.id, item.columnId, item.order)\n        }\n    }))\n\n    const [{}, drop] = useDrop(() => ({\n        accept: \"task\",\n        drop: async (item) => {\n            if(item.columnId === task.columnId) {\n                let draggedTask = await agent.task.getById(projectId, item.columnId, item.id)\n                let droppedTask = await agent.task.getById(projectId, task.columnId, task.id)\n                await agent.task.update(projectId,task.columnId, task.id, {order: draggedTask.order, columnId: draggedTask.columnId})\n                await agent.task.update(projectId,item.columnId, item.id, {order: droppedTask.order, columnId: droppedTask.columnId})\n                let newColumns = await agent.column.getAll(projectId)\n                dispatch(setColumns(newColumns))\n            }\n        }\n    }))\n    \n    //changes the taskClicked state to true if a task is clicked \n    const handleTaskClick = async () => {\n        let Task = await agent.task.getById(projectId, task.columnId, task.id)\n        dispatch(setTask(Task))\n        let Comments = await agent.comment.getAll(projectId, task.columnId, task.id)\n        dispatch(setComments(Comments))\n        console.log(task)\n        setTaskClicked(true)\n    };\n    //changes taskClicked state to false if user clicks outside of card\n    const handleClickAway = () => {\n        \n        setTaskClicked(false);\n    };\n    //handles the updated task form when submitted\n    const handleTaskUpdateSubmit = async (e) => {\n            e.preventDefault();\n            //called from parent component(Column)\n            handleUpdateTask(updatedTask, task.id)\n            setTaskClicked(false);\n    }\n    \n    return (\n            <div ref={drop}>\n                <Item elevation={10} sx={{ margin: 1 }} ref={drag}>\n\n                    <Grid container>\n                        <Grid item xs={12}  onClick={handleTaskClick} sx={{padding: '5px', fontSize: '17px', fontWeight: '400'}}>\n                            <div className={completed}>\n                                {task.title}\n                            </div>\n                        </Grid>\n                    </Grid>\n                    <CardPreview task={task}/>\n\n                    <TaskDetails handleClickAway={handleClickAway} taskClicked={taskClicked} handleDelete={handleDelete}/>\n                </Item>\n            </div>\n            \n    \n                        \n    );\n};","/home/marboi/Work/dotnet/NoDo/client/src/Data/agent.js",["170"],[],"import axios from 'axios';\n\nconst api = axios.create({\n    baseURL:process.env.REACT_APP_API_URL\n})\nconst user = JSON.parse(localStorage.getItem('user'));\nconst config = {\n    headers: {\n        'Authorization' : `Bearer ${user ? user.token : ''}`\n    }\n}\n\nconst account = {\n    login: async(login) => {\n        const response = await api.post('account/login', login).catch((e) => console.log(e));\n        if(response.status !== 401){\n            localStorage.setItem('user', JSON.stringify(response.data))\n        }\n        return response;\n    },\n    register: async(register) => {\n        var err = {}\n        const response = await api.post('account/register', register)/*.catch((e) => {\n            console.log(response)\n            console.log(e)\n            \n        });*/\n        console.log(response.data)\n        if(response.status !== 400){\n            localStorage.setItem('user', JSON.stringify(response.data))\n        }\n        return response.data;\n    },\n    getAll: async(username) => {\n        const response = await api.get('account', {params: {searchTerm: username}})\n        return response.data;\n    }\n}\n\nconst project = {\n    getAll: async() => {\n        const user = JSON.parse(localStorage.getItem('user'));\n        console.log(user);\n        const response = await api.get(`projects/user/${user.id}`, config)\n        console.log(response.data)\n        return response.data\n        \n    },\n    getProjectUsers: async(projectId) => {\n        const response = await api.get(`projects/${projectId}/users`, config)\n        return response.data\n    },\n    addUserToProject: async(projectId, userId) => {\n        const response = await api.post(`projects/${projectId}/user/${userId}`,{}, config)\n        return response.data\n    },\n    removeUserFromProject: async(projectId, userId) => {\n        const response = await api.delete(`projects/${projectId}/user/${userId}`, config)\n        return response.data\n    },\n    getById: async(projectId) => {\n        const response = await api.get(`projects/${projectId}`, config)\n        return response.data\n    },\n    add: async(project) => {\n        const user = JSON.parse(localStorage.getItem('user'));\n        const response = await api.post(`projects/user/${user.id}`, project, config)\n        return response.data\n    },\n    update: async(projectId, project) => {\n        const response = await api.put(`projects/${projectId}`, project, config)\n        return response.data\n    },\n    delete: async(projectId) => {\n        const response = await api.delete(`projects/${projectId}`, config)\n        return response.data\n    },\n}\n\nconst column = {\n    getAll: async(projectId) => {\n        const response = await api.get(`projects/${projectId}/columns`, config);\n        return response.data\n    },\n    getById: async(projectId, columnId) => {\n        const response = await api.get(`projects/${projectId}/columns/${columnId}`, config)\n        return response.data\n    },\n    \n    add: async(projectId, column) => {\n        const response = await api.post(`projects/${projectId}/columns`, column, config);\n        return response.data;\n    },\n    delete: async(projectId, columnId) => {\n        const response = await api.delete(`projects/${projectId}/columns/${columnId}`, config);\n        return response.data\n    },\n    update: async(projectId, columnId, column) => {\n        const response = await api.put(`projects/${projectId}/columns/${columnId}`, column, config)\n        return response.data\n    }\n}\n\nconst task = {\n    getAll: async(projectId, columnId) => {\n        const response = await api.get(`projects/${projectId}/columns/${columnId}/cards`, config);\n        return response.data\n    },\n    getAssignedCards: async(userId) => {\n        const response = await api.get(`user/${userId}/cards`, config);\n        return response.data\n    },\n    delete: async(projectId, columnId, taskId) => {\n        const response = await api.delete(`projects/${projectId}/columns/${columnId}/cards/${taskId}`, config);\n        return response.data\n    },\n    add: async(projectId, columnId, task) => {\n        const response = await api.post(`projects/${projectId}/columns/${columnId}/cards`, task, config);\n        return response.data\n    },\n    update: async(projectId, columnId, taskId, task) => {\n        const response = await api.put(`projects/${projectId}/columns/${columnId}/cards/${taskId}`, task, config);\n        return response.data\n    },\n    getById: async(projectId, columnId, taskId) => {\n        const response = await api.get(`projects/${projectId}/columns/${columnId}/cards/${taskId}`, config);\n        return response.data\n    }\n}\n\nconst comment = {\n    getAll: async(projectId, columnId, cardId) => {\n        const response = await api.get(`projects/${projectId}/columns/${columnId}/cards/${cardId}/comments`, config);\n        return response.data\n    },\n    add: async(projectId, columnId, cardId, comment) => {\n        const response = await api.post(`projects/${projectId}/columns/${columnId}/cards/${cardId}/comments`, comment, config);\n        return response.data\n    },\n    delete: async(projectId, columnId, cardId, id) => {\n        const response = await api.delete(`projects/${projectId}/columns/${columnId}/cards/${cardId}/comments/${id}`, config);\n        return response.data\n    }\n}\n\nconst label = {\n    getAll: async(projectId, columnId, cardId) => {\n        const response = await api.get(`projects/${projectId}/columns/${columnId}/cards/${cardId}/labels`, config);\n        return response.data\n    },\n    add: async(projectId, columnId, cardId, label) => {\n        const response = await api.post(`projects/${projectId}/columns/${columnId}/cards/${cardId}/labels`, label, config);\n        return response.data\n    },\n    delete: async(projectId, columnId, cardId, id) => {\n        const response = await api.delete(`projects/${projectId}/columns/${columnId}/cards/${cardId}/labels/${id}`, config);\n        return response.data\n    }\n}\n\nconst assignedTo = {\n    getAll: async(projectId, columnId, cardId) => {\n        const response = await api.get(`projects/${projectId}/columns/${columnId}/cards/${cardId}/assignedTo`, config);\n        return response.data\n    },\n    add: async(projectId, columnId, cardId, assignedTo) => {\n        const response = await api.post(`projects/${projectId}/columns/${columnId}/cards/${cardId}/assignedTo`, assignedTo, config);\n        return response.data\n    },\n    delete: async(projectId, columnId, cardId, id) => {\n        const response = await api.delete(`projects/${projectId}/columns/${columnId}/cards/${cardId}/assignedTo/${id}`, config);\n        return response.data\n    }\n}\n\nconst like = {\n    add: async(projectId, columnId, cardId, commentId, like) => {\n        const response = await api.post(`projects/${projectId}/columns/${columnId}/cards/${cardId}/comments/${commentId}/likes`, like, config);\n        return response.data\n    },\n    delete: async(projectId, columnId, cardId, commentId, userId) => {\n        const response = await api.delete(`projects/${projectId}/columns/${columnId}/cards/${cardId}/comments/${commentId}/likes/${userId}`, config);\n        return response.data\n    }\n}\n\n\nconst agent = {\n    account,\n    project,\n    column,\n    task,\n    comment,\n    label,\n    assignedTo,\n    like\n}\n\nexport default agent;","/home/marboi/Work/dotnet/NoDo/client/src/Pages/LoginPage.jsx",["171","172","173","174"],[],"import * as React from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport {useForm, Controller} from \"react-hook-form\";\nimport agent from \"../Data/agent\";\nimport {Alert, AlertTitle} from \"@mui/material\";\nimport {useState} from \"react\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setUser} from \"../store/Slices/userSlice\";\n\n\nconst theme = createTheme();\n\nexport default function LoginPage() {\n    const {isAuthenticated} = useSelector(state => state.user)\n    const dispatch = useDispatch()\n    let navigate = useNavigate()\n    const { handleSubmit, control } = useForm();\n    const [isAuthorized, setIsAuthorized] = useState(true);\n\n    const onSubmit = async data => {\n        try{\n            const result = await agent.account.login(data);\n            dispatch(setUser(JSON.parse(localStorage.getItem('user')) || null))\n            navigate('/');\n            window.location.reload();\n        }\n        catch{\n            setIsAuthorized( false);\n        }\n    };\n    \n    return (\n       \n            <Container component=\"main\" maxWidth=\"xs\" sx={{backgroundColor: \"#eeedde\", borderRadius: '10px', height: '500px'}}>\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        paddingTop: 3,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n                    <Avatar sx={{ m: 1, bgcolor: '#eeedde' }}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign in\n                    </Typography>\n                    {\n                        !isAuthorized ? (\n                            <Alert severity=\"error\">\n                                <AlertTitle>Unauthorized</AlertTitle>\n                            </Alert>\n                        ) : ''\n                    }\n                    \n                    <Box component=\"form\" onSubmit={handleSubmit(onSubmit)} noValidate sx={{ mt: 1 }}>\n                        <Controller\n                            name=\"username\"\n                            control={control}\n                            defaultValue=\"\"\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\n                                <TextField\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"username\"\n                                    label=\"Username\"\n                                    name=\"username\"\n                                    autoComplete=\"username\"\n                                    autoFocus\n                                    value={value}\n                                    onChange={onChange}\n                                    error={!!error}\n                                    helperText={error ? error.message : null}\n                                />\n                            )}\n                            rules={{ required: 'Username required' }}\n                        />\n                        <Controller\n                            name=\"password\"\n                            control={control}\n                            defaultValue=\"\"\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\n                                <TextField\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                    value={value}\n                                    onChange={onChange}\n                                    error={!!error}\n                                    helperText={error ? error.message : null}\n                                />\n                            )}\n                            rules={{ required: 'Password required' }}\n                        />\n                        \n                        <FormControlLabel\n                            control={<Checkbox value=\"remember\" color=\"primary\" />}\n                            label=\"Remember me\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                        >\n                            Sign In\n                        </Button>\n                        <Grid container>\n                            <Grid item>\n                                <Link onClick={() => navigate(\"/register\")} variant=\"body2\" sx={{'&:hover': {cursor: 'pointer'} }}>\n                                    {\"Don't have an account? Sign Up\"}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Box>\n            </Container>\n      \n    );\n}\n","/home/marboi/Work/dotnet/NoDo/client/src/Pages/RegisterPage.jsx",["175","176","177"],[],"import * as React from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport {useForm, Controller} from \"react-hook-form\";\nimport agent from \"../Data/agent\";\nimport {Alert, AlertTitle} from \"@mui/material\";\nimport {useState} from \"react\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setUser} from \"../store/Slices/userSlice\";\n\n\nconst theme = createTheme();\n\nexport default function LoginPage() {\n    const {isAuthenticated} = useSelector(state => state.user)\n    const dispatch = useDispatch()\n    let navigate = useNavigate()\n    const { handleSubmit, control } = useForm();\n    const [isAuthorized, setIsAuthorized] = useState(true);\n\n    const onSubmit = async data => {\n        let result = '';\n        try{\n            result = await agent.account.register(data);\n            dispatch(setUser(JSON.parse(localStorage.getItem('user')) || null))\n            navigate('/projects');\n            window.location.reload();\n        }\n        catch{\n            setIsAuthorized( false);\n        }\n        console.log(result)\n    };\n\n    return (\n        \n            <Container component=\"main\" maxWidth=\"xs\" sx={{backgroundColor: \"#eeedde\", borderRadius: '10px', height: '600px'}}>\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n                    <Avatar sx={{ m: 1, bgcolor: '#eeedde' }}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign up\n                    </Typography>\n                    {\n                        !isAuthorized ? (\n                            <Alert severity=\"error\">\n                                <AlertTitle>Error</AlertTitle>\n                            </Alert>\n                        ) : ''\n                    }\n\n                    <Box component=\"form\" onSubmit={handleSubmit(onSubmit)} noValidate sx={{ mt: 1 }}>\n                        <Controller\n                            name=\"firstName\"\n                            control={control}\n                            defaultValue=\"\"\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\n                                <TextField\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"firstName\"\n                                    label=\"First Name\"\n                                    name=\"firstName\"\n                                    autoComplete=\"firstName\"\n                                    autoFocus\n                                    value={value}\n                                    onChange={onChange}\n                                    error={!!error}\n                                    helperText={error ? error.message : null}\n                                />\n                            )}\n                            rules={{ required: 'First Name required' }}\n                        />\n                        <Controller\n                            name=\"lastName\"\n                            control={control}\n                            defaultValue=\"\"\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\n                                <TextField\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"lastName\"\n                                    label=\"Last Name\"\n                                    name=\"lastName\"\n                                    autoComplete=\"lastName\"\n                                    autoFocus\n                                    value={value}\n                                    onChange={onChange}\n                                    error={!!error}\n                                    helperText={error ? error.message : null}\n                                />\n                            )}\n                            rules={{ required: 'Last Name required' }}\n                        />\n                        <Controller\n                            name=\"email\"\n                            control={control}\n                            defaultValue=\"\"\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\n                                <TextField\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email\"\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                    autoFocus\n                                    value={value}\n                                    onChange={onChange}\n                                    error={!!error}\n                                    helperText={error ? error.message : null}\n                                />\n                            )}\n                            rules={{ required: 'Email required' }}\n                        />\n                        <Controller\n                            name=\"username\"\n                            control={control}\n                            defaultValue=\"\"\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\n                                <TextField\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"username\"\n                                    label=\"Username\"\n                                    name=\"username\"\n                                    autoComplete=\"username\"\n                                    autoFocus\n                                    value={value}\n                                    onChange={onChange}\n                                    error={!!error}\n                                    helperText={error ? error.message : null}\n                                />\n                            )}\n                            rules={{ required: 'Username required' }}\n                        />\n                        <Controller\n                            name=\"password\"\n                            control={control}\n                            defaultValue=\"\"\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\n                                <TextField\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                    value={value}\n                                    onChange={onChange}\n                                    error={!!error}\n                                    helperText={error ? error.message : null}\n                                />\n                            )}\n                            rules={{ required: 'Password required' }}\n                        />\n                        \n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                        >\n                            Sign Up\n                        </Button>\n                        \n                    </Box>\n                </Box>\n            </Container>\n       \n    );\n}\n","/home/marboi/Work/dotnet/NoDo/client/src/Components/Toolbar.jsx",["178","179","180","181","182","183","184","185","186","187"],[],"import * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport InputBase from '@mui/material/InputBase';\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/material/Menu';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport SearchIcon from '@mui/icons-material/Search';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport MoreIcon from '@mui/icons-material/MoreVert';\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport Button from \"@mui/material/Button\";\nimport {useEffect, useState} from \"react\";\nimport Avatar from \"@mui/material/Avatar\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setUser} from \"../store/Slices/userSlice\";\nimport {AvatarGroup, Divider} from \"@mui/material\";\nimport {stringAvatar} from \"../Utils/stringAvatar\";\n\nconst Search = styled('div')(({ theme }) => ({\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(3),\n        width: 'auto',\n    },\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('md')]: {\n            width: '20ch',\n        },\n    },\n}));\n\n\n\n\nexport default function PrimarySearchAppBar() {\n    const {user} = useSelector(state => state.user)\n    const {members} = useSelector(state => state.columns)\n    const {currentProject} = useSelector(state => state.columns)\n    const {projectId} = useParams()\n    const dispatch = useDispatch()\n    let navigate = useNavigate()\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\n    \n\n    const isMenuOpen = Boolean(anchorEl);\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n    \n    useEffect(() => {\n        console.log(user ? user : 'bro')\n    }, [user])\n\n    \n\n    const handleProfileMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMobileMenuClose = () => {\n        setMobileMoreAnchorEl(null);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        handleMobileMenuClose();\n    };\n\n    const handleSignOut = () => {\n        localStorage.removeItem('user')\n        setAnchorEl(null);\n        handleMobileMenuClose();\n        dispatch(setUser(false))\n        navigate('/login')\n\n    };\n\n\n    const handleMobileMenuOpen = (event) => {\n        setMobileMoreAnchorEl(event.currentTarget);\n    };\n\n    const menuId = 'primary-search-account-menu';\n    const renderMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleSignOut}>Sign Out</MenuItem>\n        </Menu>\n    );\n\n    const mobileMenuId = 'primary-search-account-menu-mobile';\n    const renderMobileMenu = (\n        <Menu\n            anchorEl={mobileMoreAnchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={mobileMenuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMobileMenuOpen}\n            onClose={handleMobileMenuClose}\n        >\n            \n        </Menu>\n    );\n\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\" sx={{bgcolor: \"#141E27\"}}>\n                <Toolbar >\n                    \n                    <IconButton\n                        variant=\"h6\"\n                        noWrap\n                        component=\"div\"\n                        onClick={() => navigate('/')}\n                        sx={{ display: { xs: 'none', sm: 'block' }, cursor: 'pointer', paddingTop: '15px'}}\n                    >\n                        \n                      \n                        <a onClick={() => navigate('/project')} ><img src='https://i.postimg.cc/xXW1f6cz/nudo3.png' border='0' alt='nodo' height=\"35\" width=\"100\"/></a>\n                        \n                    </IconButton>\n                    <Search>\n                        <SearchIconWrapper>\n                            <SearchIcon />\n                        </SearchIconWrapper>\n                        <StyledInputBase\n                            placeholder=\"Search…\"\n                            inputProps={{ 'aria-label': 'search' }}\n                        />\n                    </Search>\n                    {/*{\n                        user ? (\n                            <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n                                <Button\n                                    onClick={() => navigate('/projects')}\n                                    sx={{ my: 2, color: 'white', display: 'block' }}\n                                >\n                                    Projects\n                                </Button>\n                            </Box>\n                        ) : ''\n                    }*/}\n                    \n                    <Box sx={{ flexGrow: 1 }} />\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n\n                        \n                        { user ? (\n                                <IconButton\n                                    size=\"large\"\n                                    edge=\"end\"\n                                    aria-label=\"account of current user\"\n                                    aria-controls={menuId}\n                                    aria-haspopup=\"true\"\n                                    onClick={handleProfileMenuOpen}\n                                    color=\"inherit\"\n                                >\n                                    <Avatar {...stringAvatar(`${user.firstName} ${user.lastName}`)} sx={{bgcolor: `${user.firstName} ${user.lastName}`.toColor()}}/>\n                                </IconButton>\n                                    \n                            ) : (\n                                <Button\n                                    onClick={() => navigate('/login')}\n                                    sx={{ my: 2, color: 'white', display: 'block' }}\n                                >\n                                    Log In\n                                </Button>\n                            )\n                        }\n                        \n                    </Box>\n                    <Box sx={{ display: { xs: 'flex', md: 'none' } }}>\n                        <IconButton\n                            size=\"large\"\n                            aria-label=\"show more\"\n                            aria-controls={mobileMenuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleMobileMenuOpen}\n                            color=\"inherit\"\n                        >\n                           \n                                <AccountCircle/>\n                            \n                        </IconButton>\n                        \n                    </Box>\n                </Toolbar>\n            </AppBar>\n            {renderMobileMenu}\n            {renderMenu}\n        </Box>\n    );\n}","/home/marboi/Work/dotnet/NoDo/client/src/store/configureStore.js",[],[],"/home/marboi/Work/dotnet/NoDo/client/src/store/Slices/projectsSlice.js",[],[],"/home/marboi/Work/dotnet/NoDo/client/src/store/Slices/columnsSlice.js",[],[],"/home/marboi/Work/dotnet/NoDo/client/src/store/Slices/userSlice.js",[],[],"/home/marboi/Work/dotnet/NoDo/client/src/Components/CardDemo.jsx",[],[],"/home/marboi/Work/dotnet/NoDo/client/src/Utils/stringAvatar.js",["188"],[],"String.prototype.toColor = function() {\n    var colors = [\"#D82148\", \"#789395\", \"#FFB2A6\", \"#524A4E\"]\n\n    var hash = 0;\n    if (this.length === 0) return hash;\n    for (var i = 0; i < this.length; i++) {\n        hash = this.charCodeAt(i) + ((hash << 5) - hash);\n        hash = hash & hash;\n    }\n    hash = ((hash % colors.length) + colors.length) % colors.length;\n    return colors[hash];\n}\n\nexport function stringAvatar(name) {\n    return {\n        sx: {\n            width: 41,\n            height: 41,\n            alignItems: 'center'\n        },\n        children: `${name.toString().split(' ')[0][0]}${name.toString().split(' ')[1][0]}`,\n    };\n}","/home/marboi/Work/dotnet/NoDo/client/src/Components/Comment.jsx",["189","190","191","192","193","194","195"],[],"\nimport * as React from 'react';\nimport {Container, Grid, Link, Paper, styled, Typography} from \"@mui/material\";\nimport {stringAvatar} from \"../Utils/stringAvatar\";\nimport Avatar from \"@mui/material/Avatar\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport agent from \"../Data/agent\";\nimport {setTask} from \"../store/Slices/taskSlice\";\nimport {useParams} from \"react-router-dom\";\nimport {setComments} from \"../store/Slices/commentsSlice\";\nimport {useEffect, useState} from \"react\";\n\n\nexport const Comment = ({username, name, text, comment}) => {\n    \n    const {user} = useSelector(state => state.user)\n    const {projectId} = useParams()\n    const {task} = useSelector(state => state.task)\n    const {comments} = useSelector(state => state.comments)\n    const [liked, setLiked] = useState(false)\n    const dispatch = useDispatch()\n    \n    useEffect(() => {\n        setLiked(false)\n            comment.likes?.forEach(like => {\n                if(like.userId == user.id){\n                    setLiked(true)\n                } \n            })\n        \n    }, [liked, comments])\n    \n    const checkLiked = () => {\n        comments.likes?.forEach(like => {\n            if(like.userId.equals(user.id)){\n                return true\n            }\n        })\n        return false\n    }\n\n    const Item = styled(Paper)(({ theme }) => ({\n        ...theme.typography.body1,\n        color: theme.palette.text.secondary,\n        textAlign: 'left',\n        lineHeight: '30px',\n        padding: '7px',\n        wordWrap: 'break-word',\n    }));\n\n    const handleCommentDelete = async() => {\n        const deletedComment = await agent.comment.delete(projectId, task.columnId, task.id, comment.id)\n        let newTask = {...task, comments: task.comments.filter(c => c.id !== comment.id)}\n        dispatch(setTask(newTask))\n        dispatch(setComments(newTask.comments))\n    }\n    \n    const handleCommentLike = async() => {\n        const newComment = await agent.like.add(projectId, task.columnId, task.id, comment.id, {userId: user.id})\n        console.log(comments)\n        let newComments = await agent.comment.getAll(projectId, task.columnId, task.id)\n        dispatch(setComments(newComments))\n    }\n    \n    const handleCommentUnlike = async() => {\n        const newComment = await agent.like.delete(projectId, task.columnId, task.id, comment.id, user.id)\n        let newComments = await agent.comment.getAll(projectId, task.columnId, task.id)\n        dispatch(setComments(newComments))\n    }\n    \n    return (\n        \n            <Grid container marginBottom={2}>\n                <Grid item xs={2.5} sm={1.5} md={1.5} lg={1}>\n                    <Avatar {...stringAvatar(name)}\n                            key={name} sx={{margin: '10px', bgcolor: name.toColor(), width: 35, height: 35}}/>\n                </Grid>\n                <Grid item xs={9.5} sm={10.5} md={10.5} lg={11}>\n                    <Typography variant='subtitle1'>{username}</Typography>\n                    <Item elevaion={16} padding={2}>{text}</Item>\n                    {\n                        comment.user.id === user.id ? (\n                            <Link href=\"#\" variant=\"subtitle2\" color='secondary' textAlign=\"right\" onClick={() => handleCommentDelete(comment.id)}>\n                                {\"Delete\"}\n                            </Link>\n                        ) : (\n                            <></>\n                        )\n                    }\n                    {\" - \"}\n\n                    {\n                        liked ? (\n                            <Link href=\"#\" variant=\"subtitle2\" color='secondary' textAlign=\"right\" onClick={() => handleCommentUnlike()}>\n                                Unlike\n                            </Link>\n                        ) : (\n                            <Link href=\"#\" variant=\"subtitle2\" color='secondary' textAlign=\"right\" onClick={() => handleCommentLike()}>\n                                Like\n                            </Link>\n                        )\n                    }\n                    {\" - \"}\n                    {comment.likes == null ? 0 : comment.likes.length}\n                </Grid>\n\n            </Grid>\n            \n    );\n};","/home/marboi/Work/dotnet/NoDo/client/src/Components/TaskDetails.jsx",["196","197","198","199","200","201","202","203","204"],[]," \nimport * as React from 'react';\nimport {\n    AvatarGroup,\n    Backdrop, Chip,\n    Container,\n    Divider,\n    Fade,\n    FormControl,\n    Grid,\n    IconButton, Link,\n    Modal, Popover,\n    TextField,\n    Typography\n} from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport TitleIcon from \"@mui/icons-material/Title\";\nimport NotesIcon from \"@mui/icons-material/Notes\";\nimport CommentIcon from \"@mui/icons-material/Comment\";\nimport {Comment} from \"./Comment\";\nimport CloseIcon from '@mui/icons-material/Close';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Button from \"@mui/material/Button\";\nimport {useEffect, useState} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport agent from \"../Data/agent\";\nimport {setTask} from \"../store/Slices/taskSlice\";\nimport Avatar from \"@mui/material/Avatar\";\nimport {stringAvatar} from \"../Utils/stringAvatar\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport {SearchMembers} from \"./SearchMembers\";\nimport Tooltip from '@mui/material/Tooltip';\nimport RemoveIcon from \"@mui/icons-material/Remove\";\nimport PopupState, {bindPopover, bindTrigger} from \"material-ui-popup-state\";\nimport LabelsEdit from \"./LabelsEdit\";\nimport {setComments} from \"../store/Slices/commentsSlice\";\nimport {setColumns} from \"../store/Slices/columnsSlice\";\nimport {alpha, styled} from \"@mui/material/styles\";\n\n\nconst modalStyle = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    overflow: 'auto',\n    overflowWrap: 'break-word',\n    width: '70%',\n    height: '90%',\n    transform: 'translate(-50%, -50%)',\n    bgcolor: '#ddd8c4',\n    border: '2px solid purple',\n    boxShadow: 24,\n    p: 2,\n};\n\n\n\n\nexport const TaskDetails = ({taskClicked, handleClickAway, handleDelete}) => {\n    \n    const {task} = useSelector(state=> state.task)\n    const {comments} = useSelector(state => state.comments)\n    const dispatch = useDispatch();\n    const [newDescription, setNewDescription] = useState('')\n    const [addDescriptionClicked, setAddDescriptionClicked] = useState(false) \n    const [descriptionClicked, setDescriptionClicked] = useState(false)\n    const [titleClicked, setTitleClicked] = useState(false)\n    const [newTitle, setNewTitle] = useState('')\n    const [newComment, setNewComment] = useState('')\n    const [assignedToClicked, setAssignedToClicked] = useState(false)\n    const {projectId} = useParams()\n    const {user} = useSelector(state => state.user)\n    \n\n    useEffect( () => {\n        setNewDescription(task.description)\n        setAddDescriptionClicked(false)\n        setDescriptionClicked(false)\n        setNewTitle(task.title)\n        setTitleClicked(false)\n        console.log(task)\n    },[dispatch, task, comments])\n    \n    const handleDescriptionSubmit = async (e) => {\n        e.preventDefault();\n        const updatedTask = await agent.task.update(projectId, task.columnId, task.id, {description: newDescription})\n        dispatch(setTask({...updatedTask, description: newDescription}))\n        setAddDescriptionClicked(false)\n        setDescriptionClicked(false)\n    }\n\n    const handleTitleSubmit = async (e) => {\n        e.preventDefault();\n        const updatedTask = await agent.task.update(projectId, task.columnId, task.id, {title: newTitle})\n        dispatch(setTask({...updatedTask, title: newTitle}))\n        setTitleClicked(false)\n    }\n\n    const handleCommentSubmit = async (e) => {\n        e.preventDefault();\n        const updatedTask = await agent.comment.add(projectId, task.columnId, task.id, {userId: user.id, text: newComment})\n        console.log(updatedTask)\n        dispatch(setTask(updatedTask))\n        let Comments = await agent.comment.getAll(projectId, task.columnId, task.id)\n        dispatch(setComments(Comments))\n        setNewComment('')\n    }\n\n    const handleAssignToButton = async (user) => {\n        const updatedTask = await agent.assignedTo.add(projectId, task.columnId, task.id, {userId: user.id})\n        dispatch(setTask(updatedTask))\n    }\n    \n\n    const handleLabelsDelete = async (label) => {\n        const updatedTask = await agent.label.delete(projectId, task.columnId, task.id, label.id)\n        dispatch(setTask(updatedTask))\n    }\n\n    const handleAssignedToDelete = async (user) => {\n        const updatedTask = await agent.assignedTo.delete(projectId, task.columnId, task.id, user.id)\n        dispatch(setTask(updatedTask))\n    }\n    \n    const iconColor = \"#141E27\"\n    \n    const handleCompleted = async (id) => {\n        await agent.task.update(projectId, task.columnId, id, {completed: true})\n        dispatch(setColumns(await agent.column.getAll(projectId)))\n    }\n    \n    \n    \n    \n    return (\n        <Modal\n            aria-labelledby=\"transition-modal-title\"\n            aria-describedby=\"transition-modal-description\"\n            open={taskClicked}\n            onClose={handleClickAway}\n            closeAfterTransition\n            BackdropComponent={Backdrop}\n            BackdropProps={{\n                timeout: 500,\n            }}\n        >\n            \n            <Fade in={taskClicked}>\n                \n                <Box sx={modalStyle}>\n                    \n                    {/*close icon in the top left corner of the modal*/}\n                    <Box textAlign='right'>\n                        <IconButton color=\"secondary\" aria-label=\"upload picture\" component=\"span\" onClick={handleClickAway}>\n                            <CloseIcon />\n                        </IconButton>\n                    </Box>\n                    \n                    {/*content of the modal*/}\n                    <Container fixed sx={{margin: '0px'}}>\n                        \n                        {/*title grid*/}\n                        <Grid container spacing={2}>\n                            {/*title icon*/}\n                            <Grid item xs={1.5} sm={1} md={0.7}>\n                                <TitleIcon fontSize=\"medium\"  sx={{bgcolor: {iconColor}, border: '1px solid{iconColor', color:'#ffffff', marginLeft:'0px', borderRadius: '5px'}}/>\n                            </Grid>\n                            {/*title text - text area*/}\n                            {\n                                titleClicked ? (\n                                    <form noValidate autoComplete=\"off\" onSubmit={handleTitleSubmit}>\n                                        <TextField onChange={(e) => setNewTitle(e.target.value)}\n                                                   value={newTitle} id=\"outlined-basic\" label=\"Title\" variant=\"outlined\" color='secondary' sx={{bgcolor: 'white', marginLeft: '15px', marginRight: '1rem'}}/>\n                                    </form>\n                                ) : (\n                                    <Grid item xs={10}>\n                                        <Typography variant='h5' onClick={(() => setTitleClicked(true))}>{task.title}</Typography>\n                                    </Grid>\n                                )\n                            }\n\n                        </Grid>\n                        \n                        <Container sx={{ display: { xs:'inline', sm: 'inline', md: 'none' } }}>\n                            <PopupState variant=\"popover\" popupId=\"demo-popup-popover\">\n                                {(popupState) => (\n                                    <div style={{paddingTop: '20px'}}>\n                                        Labels: {' '}\n                                        <Chip label=\"+\" {...bindTrigger(popupState)}/>\n                                        <Popover\n                                            {...bindPopover(popupState)}\n                                            anchorOrigin={{\n                                                vertical: 'bottom',\n                                                horizontal: 'center',\n                                            }}\n                                            transformOrigin={{\n                                                vertical: 'top',\n                                                horizontal: 'center',\n                                            }}\n                                        >\n                                            <LabelsEdit labels={task.labels}/>\n                                        </Popover>\n                                        {\n                                            task.labels ? \n                                                task.labels.map(label => (\n                                                    <Chip label={label.text} variant=\"outlined\" key={label.id} onDelete={() => handleLabelsDelete(label)}/>\n                                                )) : ''\n                                                \n                                           \n                                        }\n                                    </div>\n                                )}\n                            </PopupState>\n                            \n                            <PopupState variant=\"popover\" popupId=\"assignTo\" >\n                                {(popupState) => (\n                                    <div style={{paddingTop: '20px'}}>\n                                        Assigned To: {' '}\n                                        <Chip label=\"+\" {...bindTrigger(popupState)}/>\n                                        <Popover\n                                            {...bindPopover(popupState)}\n                                            anchorOrigin={{\n                                                vertical: 'bottom',\n                                                horizontal: 'center',\n                                            }}\n                                            transformOrigin={{\n                                                vertical: 'top',\n                                                horizontal: 'center',\n                                            }}\n                                        >\n                                            <SearchMembers handleSubmit={handleAssignToButton}/>\n\n                                        </Popover>\n                                        {\n                                            task.assignedTo ? \n                                            task.assignedTo.map(member => (\n                                                <Tooltip title={`${member.firstName} ${member.lastName}`} arrow>\n                                                    <Chip\n                                                        avatar={<Avatar {...stringAvatar(`${member.firstName} ${member.lastName}`)}\n                                                                        key={member.id} sx={{bgcolor: `${member.firstName} ${member.lastName}`.toColor()}}/>}\n                                                        label={`${member.firstName} ${member.lastName}`}\n                                                        variant=\"outlined\"\n                                                        sx={{marginRight: '3px'}}\n                                                        onDelete={() => handleAssignedToDelete(member)}\n                                                    />\n                                                </Tooltip>\n                                            )) : ''\n                                        }\n                                    </div>\n\n                                )}\n                            </PopupState>\n                        </Container>\n                        <Divider sx={{paddingTop: '20px'}}/>\n                        \n                        \n                        <Grid container spacing={2}>\n                            {/*desc & comments grid*/}\n                            <Grid item xs={12} sm={12} md={9} lg={10}>\n                                <Grid container spacing={2} marginTop={4}>\n                                    <Grid item xs={1.5} sm={1} md={0.7}>\n                                        <NotesIcon fontSize=\"medium\"  sx={{bgcolor: {iconColor}, border: `1px solid ${iconColor}`, color:{iconColor}, borderRadius: '5px'}}/>\n                                    </Grid>\n                                    <Grid item xs={10.5} sm={11} md={11}>\n                                        <Typography variant='h6'>Description</Typography>\n                                    </Grid>\n                                </Grid>\n                                <Grid container spacing={2} marginTop={1}>\n                                    <Grid item xs={0.7}>\n\n                                    </Grid >\n                                    {\n                                        (task.description && !descriptionClicked) ? (\n                                            <Grid item xs={11}>\n                                                <Typography variant='body1' sx={{whiteSpace: 'pre-line'}} onClick={(() => setDescriptionClicked(true))}>{task.description}</Typography>\n                                            </Grid>\n                                        ) : <>\n                                            {\n\n                                                (addDescriptionClicked || descriptionClicked) ? (\n                                                    <Grid item xs={11}>\n                                                        <form noValidate autoComplete=\"off\" onSubmit={handleDescriptionSubmit} style={{margin: '0px', padding:'0px'}}>\n                                                            <TextField fullWidth onChange={(e) => setNewDescription(e.target.value)}\n                                                                       value={newDescription || ''} id=\"outlined-basic\" label=\"Description\" variant=\"outlined\" multiline rows={5}  color='secondary' sx={{bgcolor: 'white', marginRight: '1rem', marginBottom: '5px'}}/>\n                                                            <Button type=\"submit\" color=\"secondary\" size=\"small\" variant=\"outlined\" onSubmit={(() => setAddDescriptionClicked(true))}>Save</Button>\n                                                        </form>\n                                                    </Grid>\n\n                                                ) : (\n                                                    <Grid item xs={3} >\n                                                        <Button color=\"secondary\" size=\"small\" variant=\"outlined\" onClick={(() => setAddDescriptionClicked(true))}>Add Description</Button>\n                                                    </Grid>\n                                                )\n\n                                            }\n                                        </>\n                                    }\n\n                                </Grid>\n                                <Divider sx={{paddingTop: '44px'}}/>\n                                <Grid container spacing={2} marginTop={4}>\n                                    <Grid item xs={1.5} sm={1} md={0.7}>\n                                        <CommentIcon fontSize=\"medium\"  sx={{bgcolor: {iconColor}, border: '1px solid', color:{iconColor}, marginLeft:'0px', borderRadius: '5px'}}/>\n                                    </Grid>\n                                    <Grid item xs={10.5} sm={11} md={11} marginBottom={2}>\n                                        <Typography variant='h6' >Comments</Typography>\n\n                                    </Grid>\n                                    <Grid container>\n                                        <Grid item xs={2} lg={1} xl={0.8}>\n                                            <Avatar {...stringAvatar(`${user.firstName} ${user.lastName}`)}\n                                                    key={user.id} sx={{bgcolor: `${user.firstName} ${user.lastName}`.toColor()}}/>\n                                        </Grid>\n                                        <Grid item xs={10} lg={11} xl={11.2}>\n                                            <form noValidate autoComplete=\"off\" onSubmit={handleCommentSubmit} style={{margin: '0px', padding:'0px'}}>\n                                                <TextField fullWidth onChange={(e) => setNewComment(e.target.value)}\n                                                           value={newComment} id=\"outlined-basic\" label=\"Comment\" variant=\"outlined\" multiline rows={2}  color='secondary' sx={{bgcolor: 'white', marginRight: '1rem', marginBottom: '5px'}}/>\n                                                <Button type=\"submit\" color=\"secondary\" size=\"small\" variant=\"outlined\" onSubmit={(() => handleCommentSubmit)}>Save</Button>\n                                            </form>\n                                        </Grid>\n                                    </Grid>\n                                    {\n                                        comments ? \n                                        comments.map(comment => (\n                                            <>\n                                                <Comment name={`${comment.user.firstName} ${comment.user.lastName}`} username={comment.user.userName} text={comment.text} comment={comment} key={comment.id}/>\n                                            </>\n                                            \n                                        )) : ('')\n                                    }\n                                </Grid>\n                            </Grid>\n                            \n                            {/*labels & assigned members grid*/}\n                            \n                                <Grid item xs={0} sm={0} md={3} lg={2} marginTop={4} sx={{ display: { xs:'none', sm: 'none', md: 'inline' } }}>\n                                    <Typography variant='subtitle1' sx={{ display: { xs:'none', sm: 'none', md: 'inline' } }}>Labels:</Typography>\n                                    <PopupState variant=\"popover\" popupId=\"demo-popup-popover\">\n                                        {(popupState) => (\n                                            <div>\n                                                <Chip label=\"+\" {...bindTrigger(popupState)}/>\n                                                <Popover\n                                                    {...bindPopover(popupState)}\n                                                    anchorOrigin={{\n                                                        vertical: 'bottom',\n                                                        horizontal: 'center',\n                                                    }}\n                                                    transformOrigin={{\n                                                        vertical: 'top',\n                                                        horizontal: 'center',\n                                                    }}\n                                                >\n                                                    <LabelsEdit labels={task.labels}/>\n                                                </Popover>\n                                                {\n                                                    task.labels ?\n                                                    task.labels.map(label => (\n                                                        <Chip label={label.text} variant=\"outlined\" key={label.id} onDelete={() => handleLabelsDelete(label)}/>\n                                                    )) : ''\n                                                }\n                                            </div>\n                                        )}\n                                    </PopupState>\n\n                                    <Typography variant='subtitle1' marginTop={12}>Assigned To:</Typography>\n                                    <PopupState variant=\"popover\" popupId=\"assignTo\">\n                                        {(popupState) => (\n                                            <div style={{minHeight: \"200px\"}}>\n                                                <Chip label=\"+\" {...bindTrigger(popupState)}/>\n                                                <Popover\n                                                    {...bindPopover(popupState)}\n                                                    anchorOrigin={{\n                                                        vertical: 'bottom',\n                                                        horizontal: 'center',\n                                                    }}\n                                                    transformOrigin={{\n                                                        vertical: 'top',\n                                                        horizontal: 'center',\n                                                    }}\n                                                >\n                                                    <SearchMembers handleSubmit={handleAssignToButton}/>\n\n                                                </Popover>\n                                                {\n                                                    task.assignedTo ?\n                                                    task.assignedTo.map(member => (\n                                                        <Tooltip title={`${member.firstName} ${member.lastName}`} arrow>\n                                                            <Chip\n                                                                avatar={<Avatar {...stringAvatar(`${member.firstName} ${member.lastName}`)}\n                                                                                key={member.id} sx={{bgcolor: `${member.firstName} ${member.lastName}`.toColor()}}/>}\n                                                                label={`${member.firstName} ${member.lastName}`}\n                                                                variant=\"outlined\"\n                                                                sx={{marginRight: '3px'}}\n                                                                onDelete={() => handleAssignedToDelete(member)}\n                                                            />\n                                                        </Tooltip>\n                                                    )) : ''\n                                                }\n                                            </div>\n\n                                        )}\n                                    </PopupState>\n                                    <div style={{marginTop: 40}}>\n                                        Actions:\n                                    </div>\n                                    <div style={{marginTop: 20}}>\n                                        <Button sx={{color: \"#141E27\"}} color=\"success\" size=\"small\" onClick={() => handleCompleted(task.id)} variant=\"outlined\">Mark as completed</Button>\n                                    </div>\n                                    <div style={{marginTop: 20}}>\n                                        <Button sx={{color: \"#d83a3a\"}} color=\"error\" size=\"small\" onClick={() => handleDelete(task.id)} variant=\"outlined\">Delete Task</Button>\n                                    </div>\n\n\n                                </Grid>\n                            \n                        </Grid>\n                        <Container sx={{ display: { xs:'inline', sm: 'inline', md: 'none' }, marginTop: '100px' }}>\n                            <Grid container>\n                                <Grid item xs={3}>\n                                    Actions: {'  '}\n                                </Grid>\n                                <Grid item xs={4} sx={{marginLeft: '10px'}}>\n                                    <Button sx={{color: \"#141E27\"}} color=\"success\" size=\"small\" onClick={() => handleCompleted(task.id)} variant=\"outlined\">Mark as completed</Button>\n                                    <Button sx={{color: \"#d83a3a\", marginTop:'5px'}} color=\"error\" size=\"small\" onClick={() => handleDelete(task.id)} variant=\"outlined\">Delete Task</Button>\n                                </Grid>\n                                \n                                \n                            </Grid>\n                        </Container>\n                    </Container>\n                </Box>\n            </Fade>\n        </Modal>\n    );\n};","/home/marboi/Work/dotnet/NoDo/client/src/store/Slices/taskSlice.js",[],[],"/home/marboi/Work/dotnet/NoDo/client/src/store/Slices/uselessSlice.js",[],[],"/home/marboi/Work/dotnet/NoDo/client/src/Components/LabelsEdit.jsx",["205","206","207","208","209","210","211"],[],"import * as React from 'react';\nimport Chip from '@mui/material/Chip';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\nimport {Container, List, ListItem, ListItemAvatar, ListItemButton, ListItemText} from \"@mui/material\";\nimport {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useParams} from \"react-router-dom\";\nimport agent from \"../Data/agent\";\nimport {setTask} from \"../store/Slices/taskSlice\";\nimport Box from \"@mui/material/Box\";\nimport Avatar from \"@mui/material/Avatar\";\nimport {stringAvatar} from \"../Utils/stringAvatar\";\n\nexport default function LabelsEdit({labels}) {\n    \n    \n    const dispatch = useDispatch()\n    const {task} = useSelector(state=> state.task)\n    const {projectId} = useParams()\n    const [newLabel, setNewLabel] = useState('')\n    const [textAreaClicked, setTextAreaClicked] = useState(false)\n\n    useEffect(() => {\n        setTextAreaClicked(false)\n    }, [task, dispatch])\n\n    const labelsText = () => {\n        let text = []\n        labels.forEach(label => text.push(label.text))\n        return text\n    }\n    \n    const handleLabelsSubmit = async (label) => {\n        setTextAreaClicked(false)\n        setNewLabel('')\n        const updatedTask = await agent.label.add(projectId, task.columnId, task.id, {text:label})\n        dispatch(setTask(updatedTask))\n    }\n    return (\n        <Container sx={{width: 'auto', height: 'auto', padding: 2, bgcolor: '#eeedde'}}>\n                    <form noValidate autoComplete=\"off\" onSubmit={(e)=>{\n                        e.preventDefault();\n                        handleLabelsSubmit(newLabel)\n                    }} style={{margin: '0px', padding:'0px'}}>\n                    <TextField\n                        label=\"Add Labels\"\n                        placeholder=\"Title\"\n                        onChange={(e) => setNewLabel(e.target.value)}\n                        value={newLabel || ''}\n                        onClick={()=>setTextAreaClicked(true)}\n                    />\n                    </form>\n            {\n                textAreaClicked ? (\n                    <Box sx={{ width: '95%', maxWidth: 360, bgcolor: '#eeedde' }}>\n                        <List sx={{\n                            width: '100%',\n                            maxWidth: 360,\n                            bgcolor: '#eeedde',\n                            position: 'relative',\n                            overflow: 'auto',\n                            maxHeight: 300,\n                            '& ul': { padding: 0 },\n                        }}\n                              subheader={<li />}>\n                            {\n                                labels ?\n                                labels.map(label => (\n                                    <ListItem sx={{padding: 0}}>\n                                        <ListItemButton onClick={() => handleLabelsSubmit(label.text)}>\n                                            <ListItemText primary={label.text} />\n                                        </ListItemButton>\n                                    </ListItem>\n                                )) : ''\n                            }\n\n                        </List>\n                    </Box>\n                ) : (\n                    <></>\n                )\n            }\n        </Container>\n        \n    )\n}","/home/marboi/Work/dotnet/NoDo/client/src/store/Slices/commentsSlice.js",[],[],"/home/marboi/Work/dotnet/NoDo/client/src/Components/CardPreview.jsx",[],[],"/home/marboi/Work/dotnet/NoDo/client/src/Components/Members.jsx",["212","213","214","215","216","217","218","219","220","221"],[]," \nimport * as React from 'react';\nimport {AvatarGroup, IconButton, List, ListItem, ListItemAvatar, ListItemText, Popover} from \"@mui/material\";\nimport PopupState, {bindPopover, bindTrigger} from \"material-ui-popup-state\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport {SearchUsers} from \"./SearchUsers\";\nimport {stringAvatar} from \"../Utils/stringAvatar\";\nimport {useState} from \"react\";\nimport agent from \"../Data/agent\";\nimport {setMembers} from \"../store/Slices/columnsSlice\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useParams} from \"react-router-dom\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"@mui/material/Button\";\nimport {MembersEdit} from \"./MembersEdit\";\n\nexport const Members = () => {\n    const dispatch = useDispatch()\n    const {members} = useSelector(state => state.columns)\n    const [addMemberClicked, setAddMemberClicked] = useState(false)\n    const {projectId} = useParams()\n    const {user} = useSelector(state => state.user)\n    \n\n    const handleAddMember = async (user) => {\n        const updatedProject = await agent.project.addUserToProject(projectId, user.id)\n        console.log(user)\n        dispatch(setMembers(await agent.project.getProjectUsers(projectId)))\n    }\n\n    const handleRemoveMember = async (user) => {\n        const updatedProject = await agent.project.removeUserFromProject(projectId, user.id)\n        dispatch(setMembers(await agent.project.getProjectUsers(projectId)))\n    }\n    \n    const renderMembers = () => {\n        \n    }\n    \n    return (\n        <div style={{textAlign:'center',}}>\n            <AvatarGroup sx={{alignItems:'center', maxWidth: '300px'}} align='center'>\n                <PopupState variant=\"popover\" popupId=\"assignTo\">\n                    {(popupState) => (\n                        <div>\n                            <Avatar {...bindTrigger(popupState)}>\n                                <Tooltip title=\"Add member\" arrow>\n                                    <IconButton aria-label=\"add\" onClick={() => setAddMemberClicked(true)}>\n                                        <AddIcon fontSize=\"small\"/>\n                                    </IconButton>\n                                </Tooltip>\n                            </Avatar>\n                            <Popover\n                                {...bindPopover(popupState)}\n                                anchorOrigin={{\n                                    vertical: 'bottom',\n                                    horizontal: 'center',\n                                }}\n                                transformOrigin={{\n                                    vertical: 'top',\n                                    horizontal: 'center',\n                                }}\n                            >\n                                <SearchUsers handleSubmit={handleAddMember}/>\n\n                            </Popover>\n\n                        </div>\n                    )}\n                </PopupState>\n                {\n                    members.length < 4 ? (\n                            <>\n                                <MembersEdit members={members} setAddMemberClicked={setAddMemberClicked} user={user} handleRemoveMember={handleRemoveMember} title={'...'}/>\n                                {\n                                    members.map((member) => (\n\n                                        <Tooltip title={`${member.firstName} ${member.lastName}`} arrow>\n                                            <Avatar {...stringAvatar(`${member.firstName} ${member.lastName}`)}\n                                                    key={member.id} sx={{bgcolor: `${member.firstName} ${member.lastName}`.toColor()}}/>\n                                        </Tooltip>\n\n                                    )) \n                                }\n                                \n                            </>\n                        )\n                     : (\n                        <>\n                            <MembersEdit members={members} setAddMemberClicked={setAddMemberClicked} user={user} handleRemoveMember={handleRemoveMember} title={`+${members.length - 3}`}/>\n                            \n                            <Tooltip title={`${members[0].firstName} ${members[0].lastName}`} arrow>\n                                <Avatar {...stringAvatar(`${members[0].firstName} ${members[0].lastName}`)}\n                                        key={members[0].id} sx={{bgcolor: `${members[0].firstName} ${members[0].lastName}`.toColor()}}/>\n                            </Tooltip>\n                            <Tooltip title={`${members[1].firstName} ${members[1].lastName}`} arrow>\n                                <Avatar {...stringAvatar(`${members[1].firstName} ${members[1].lastName}`)}\n                                        key={members[1].id} sx={{bgcolor: `${members[1].firstName} ${members[1].lastName}`.toColor()}}/>\n                            </Tooltip>\n                            <Tooltip title={`${members[2].firstName} ${members[2].lastName}`} arrow>\n                                <Avatar {...stringAvatar(`${members[2].firstName} ${members[2].lastName}`)}\n                                        key={members[2].id} sx={{bgcolor: `${members[2].firstName} ${members[2].lastName}`.toColor()}}/>\n                            </Tooltip>\n                            \n                        </>\n                        )\n                }\n            </AvatarGroup>\n\n        </div>\n    );\n};","/home/marboi/Work/dotnet/NoDo/client/src/Components/MembersEdit.jsx",[],[],"/home/marboi/Work/dotnet/NoDo/client/src/Components/SearchUsers.jsx",["222","223","224","225","226","227","228","229","230","231","232","233"],[],"\nimport * as React from 'react';\nimport Button from \"@mui/material/Button\";\nimport {\n    Autocomplete, ClickAwayListener, Container,\n    List,\n    ListItem, ListItemAvatar,\n    ListItemButton,\n    ListItemIcon,\n    ListItemText,\n    Popover,\n    TextField,\n    Typography\n} from \"@mui/material\";\nimport {useEffect, useState} from \"react\";\nimport agent from \"../Data/agent\";\nimport Box from \"@mui/material/Box\";\nimport {useParams} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setTask} from \"../store/Slices/taskSlice\";\nimport {stringAvatar} from \"../Utils/stringAvatar\";\nimport Avatar from \"@mui/material/Avatar\";\n\nexport const SearchUsers = ({handleSubmit}) => {\n    const dispatch = useDispatch()\n    const {task} = useSelector(state => state.task)\n    const {members} = useSelector(state => state.columns)\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [searchText, setSearchText] = useState('');\n    const [usersQuery, setUsersQuery] = useState([]);\n    const [textAreaClicked, setTextAreaClicked] = useState(false)\n    const {projectId} = useParams()\n    \n    useEffect(() => {\n        \n    }, [usersQuery])\n\n    \n    \n\n    return (\n\n        <Container sx={{width: 'auto', height: 'auto', padding: 2, bgcolor: '#eeedde'}}>\n            \n            <TextField\n                onChange={async (e) => {\n                    setSearchText(e.target.value)\n                    let users = await agent.account.getAll(searchText)\n                    let filteredUsers = users\n                    members.forEach(member => {\n                        filteredUsers = filteredUsers.filter(user => user.userName !== member.userName)\n                    })\n                    if(searchText.length === 0) {setUsersQuery([])} else {setUsersQuery(filteredUsers)}\n                }} \n                value={searchText}  label=\"Search User\" sx={{bgcolor: '#eeedde'}}\n                onClick={() => setTextAreaClicked(true)}\n            />\n            \n            \n                {\n                    textAreaClicked ? (\n                        <Box sx={{ width: '95%', maxWidth: 360, bgcolor: '#eeedde' }}>\n                            <List sx={{\n                                width: '100%',\n                                maxWidth: 360,\n                                bgcolor: '#eeedde',\n                                position: 'relative',\n                                overflow: 'auto',\n                                maxHeight: 300,\n                                '& ul': { padding: 0 },\n                            }}\n                                  subheader={<li />}>\n                                {\n                                    usersQuery.map(user => (\n                                        <ListItem sx={{padding: 0}}>\n                                            <ListItemButton onClick={() => handleSubmit(user)}>\n                                                <ListItemAvatar>\n                                                    <Avatar {...stringAvatar(`${user.firstName} ${user.lastName}`)}\n                                                            key={user.id} sx={{bgcolor: `${user.firstName} ${user.lastName}`.toColor()}}/>\n                                                </ListItemAvatar>\n                                                <ListItemText primary={user.userName} />\n                                            </ListItemButton>\n                                        </ListItem>\n                                    ))\n                                }\n\n                            </List>\n                        </Box>\n                    ) : (\n                        <></>\n                    )\n                }\n        </Container>\n    );\n};","/home/marboi/Work/dotnet/NoDo/client/src/Components/SearchMembers.jsx",["234","235","236","237"],[],"import * as React from 'react';\nimport {useEffect, useState} from 'react';\nimport {Container, List, ListItem, ListItemAvatar, ListItemButton, ListItemText, TextField} from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport {useParams} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {stringAvatar} from \"../Utils/stringAvatar\";\nimport Avatar from \"@mui/material/Avatar\";\n\nexport const SearchMembers = ({handleSubmit}) => {\n    const dispatch = useDispatch()\n    const {task} = useSelector(state => state.task)\n    const {members} = useSelector(state => state.columns)\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [searchText, setSearchText] = useState('');\n    const [usersQuery, setUsersQuery] = useState([]);\n    const [textAreaClicked, setTextAreaClicked] = useState(false)\n    const {projectId} = useParams()\n\n    useEffect(() => {\n\n    }, [usersQuery])\n\n\n\n\n    return (\n\n        <Container sx={{width: 'auto', height: 'auto', padding: 2, bgcolor: '#eeedde'}}>\n\n            <TextField\n                onChange={async (e) => {\n                    setSearchText(e.target.value)\n                    let filteredUsers = members\n                    if(task.assignedTo){\n                        task.assignedTo.forEach(member => {\n                            filteredUsers = filteredUsers.filter(user => user.userName !== member.userName)\n                        })\n                    }\n                    console.log(filteredUsers)\n                    if(searchText.length === 0) {setUsersQuery([])} else {setUsersQuery(filteredUsers)}\n                    \n                }}\n                value={searchText}  label=\"Search User\" sx={{bgcolor: '#eeedde'}}\n                onClick={() => setTextAreaClicked(true)}\n            />\n\n\n            {\n                textAreaClicked ? (\n                    <Box sx={{ width: '95%', maxWidth: 360, bgcolor: '#eeedde' }}>\n                        <List sx={{\n                            width: '100%',\n                            maxWidth: 360,\n                            bgcolor: '#eeedde',\n                            position: 'relative',\n                            overflow: 'auto',\n                            maxHeight: 300,\n                            '& ul': { padding: 0 },\n                        }}\n                              subheader={<li />}>\n                            {\n                                usersQuery != null ?\n                                usersQuery.map(user => (\n                                    <ListItem sx={{padding: 0}}>\n                                        <ListItemButton onClick={() => handleSubmit(user)}>\n                                            <ListItemAvatar>\n                                                <Avatar {...stringAvatar(`${user.firstName} ${user.lastName}`)}\n                                                        key={user.id} sx={{bgcolor: `${user.firstName} ${user.lastName}`.toColor()}}/>\n                                            </ListItemAvatar>\n                                            <ListItemText primary={user.userName} />\n                                        </ListItemButton>\n                                    </ListItem>\n                                )) : ''\n                            }\n\n                        </List>\n                    </Box>\n                ) : (\n                    <></>\n                )\n            }\n        </Container>\n    );\n};","/home/marboi/Work/dotnet/NoDo/client/src/Pages/ProjectPage.jsx",["238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254"],[],"\nimport * as React from 'react';\nimport {Column} from \"../Components/Column\";\nimport {\n    AvatarGroup,\n    Chip,\n    ClickAwayListener,\n    Fab,\n    Grid,\n    Grow,\n    IconButton,\n    Link,\n    Paper,\n    Popover, TextField,\n    Typography\n} from \"@mui/material\";\nimport {useEffect, useState} from \"react\";\nimport agent from \"../Data/agent\";\nimport {DndProvider, useDrag, useDrop} from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\"\nimport {useParams, useNavigate} from \"react-router-dom\";\nimport Button from \"@mui/material/Button\";\nimport {\n    addColumn,\n    deleteColumn,\n    setColumns,\n    setCurrentProject,\n    setMembers,\n    updateColumn\n} from \"../store/Slices/columnsSlice\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Members} from \"../Components/Members\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport Container from \"@mui/material/Container\";\nimport Box from \"@mui/material/Box\";\n\n\nexport const ProjectPage = () => {\n    const dispatch = useDispatch();\n    const {columns} = useSelector(state => state.columns)\n    const {members} = useSelector(state => state.columns)\n    const {currentProject} = useSelector(state => state.columns)\n    const {projectId} = useParams()\n    const [project, setProject] = useState({})\n    const [orderCount, setOrderCount] = useState(0)\n    const [titleClicked, setTitleClicked] = useState(false)\n    const [updatedTitle, setUpdatedTitle] = useState(project.title)\n    \n    \n    let transition = 0\n    \n\n    const navigate = useNavigate()\n\n    \n\n    useEffect(async () => {\n\n        let columnsAsync = await agent.column.getAll(projectId)\n        dispatch(setColumns(columnsAsync))\n\n        let membersAsync = await agent.project.getProjectUsers(projectId)\n        dispatch(setMembers(membersAsync))\n\n        let projectAsync = await agent.project.getById(projectId)\n        setProject(projectAsync)\n        \n        \n\n        dispatch(setCurrentProject(projectAsync))\n        \n        console.log(columns)\n\n    },[dispatch])\n\n    \n    \n    \n    \n    const handleDeleteColumn = async (id) => {\n        /*await agent.column.delete(projectId,id)\n        dispatch(deleteColumn(id))\n        for (const column of columns) {\n            await agent.column.update(projectId, column.id, {order: column.order})\n        }*/\n\n        const deletedColumn = await agent.column.delete(projectId, id)\n        for (const column1 of columns) {\n            if(column1.order > deletedColumn.order){\n                await agent.column.update(projectId, column1.id, {order: column1.order - 1})\n            }\n        }\n        dispatch(setColumns(await agent.column.getAll(projectId)))\n    }\n\n    //updates existing task and passes the function to child component(Task) to take as a parameter the existing task id and the updated task\n    const handleUpdateColumn = async (updatedColumn, id) => {\n        dispatch(updateColumn(updatedColumn))\n        await agent.column.update(projectId,id, updatedColumn)\n    }\n    \n    const handleAddColumn = async () => {\n        setOrderCount(orderCount + 1)\n        const newColumn = await agent.column.add(projectId,{title: 'New column', order: columns.length + 1})\n        transition = 1000\n        dispatch(addColumn(newColumn))\n    }\n\n    //changes the taskClicked state to true if a task is clicked \n    const handleTitleClick = () => {\n        setTitleClicked(true)\n    };\n    //changes taskClicked state to false if user clicks outside of card\n    const handleClickAway = () => {\n        setTitleClicked(false);\n    };\n    //handles the updated task form when submitted\n    const handleTitleUpdateSubmit = async (e) => {\n        e.preventDefault();\n        //called from parent component(Column)\n        const updatedProject = await agent.project.update(projectId, {title: updatedTitle})\n        setProject(updatedProject)\n        setTitleClicked(false);\n\n    }\n\n   \n   \n    return (\n        <div>\n            <DndProvider backend={HTML5Backend}>\n                <Box sx={{textAlign:'center', flex: 'content'}} align=\"center\">\n                    \n                \n                {\n                    titleClicked ? (\n                        <ClickAwayListener onClickAway={handleClickAway}>\n                            <form noValidate autoComplete=\"off\" onSubmit={handleTitleUpdateSubmit} style={{alignItems: 'center', justifyContent:'center', margin:'30px'}}>\n                                <TextField\n                                    onChange={(e) => setUpdatedTitle(e.target.value)}\n                                    value={updatedTitle}  id=\"outlined-basic\"  variant=\"outlined\" color='secondary' sx={{bgcolor: 'white', alignItems:'center'}} align=\"center\"/>\n                            </form>\n                        </ClickAwayListener>\n\n                    ) : (\n                        <Typography sx={{'&:hover':{border: '1px solid',  borderRadius: '10px', display:'inline-block', marginBottom:'0px' }, marginBottom:'9px'}} variant=\"h3\" align=\"center\"  margin='30px' marginBottom='20px' letterSpacing={2} onClick={handleTitleClick}>{project.title}</Typography>\n                        \n                    )\n                }\n\n                \n                <span className=\"jss3\"/>\n                </Box>\n                {/*renders all columns*/}\n                <Grid container marginTop={4} alignItems=\"center\">\n                    <Grid item xs={4}/>\n                    <Grid item xs={4}>\n                        <Members/>\n                    </Grid>\n                    <Grid item xs={4}/>\n                </Grid>\n                <Grid container sx={{\n                    flexWrap: \"nowrap\",\n                    overflowX: \"auto\",\n                }}>\n                    \n                    {columns.map(column =>  (\n                        /*<Grow in={true}>*/\n                        <Grow\n                            in={true}\n                            style={{ transformOrigin: '0 0 0' }}\n                            {...({timeout: transition+=500})}\n                            key={column.id}\n                        >\n                            <Grid item lg={3} md={5} xs={8} key={column.id} sx={{minWidth: '300px'}}>\n                                <Column column={column} handleDeleteColumn={handleDeleteColumn} updateColumn={handleUpdateColumn} projectId={projectId}/>\n                            </Grid>\n                       </Grow>\n                        \n                    ))}\n                    <Grid item xs={2} marginTop='32px'>\n                        <Button sx={{color: \"#141E27\"}} size=\"small\" onClick={handleAddColumn} variant=\"outlined\">Add Column</Button>\n                    </Grid>\n                </Grid>\n            </DndProvider>\n        </div>\n    );\n};","/home/marboi/Work/dotnet/NoDo/client/src/Pages/ViewPage.jsx",["255","256","257","258","259"],[],"\nimport * as React from 'react';\nimport {useEffect, useState} from \"react\";\nimport agent from \"../Data/agent\";\nimport {\n    Breadcrumbs,\n    Card,\n    CardContent,\n    CardMedia, Chip, emphasize,\n    Fab,\n    Grid,\n    IconButton,\n    Link,\n    styled,\n    Typography\n} from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport Button from \"@mui/material/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addProject, deleteProject, setProjects} from \"../store/Slices/projectsSlice\";\nimport {setCurrentProject} from \"../store/Slices/columnsSlice\";\n\n\nconst StyledBreadcrumb = styled(Chip)(({ theme }) => {\n    \n    return {\n       \n        height: theme.spacing(3),\n        color: theme.palette.text.primary,\n        fontWeight: theme.typography.fontWeightRegular,\n        backgroundColor: '#eeedde'\n    };\n});\n\nexport const ViewPage = () => {\n    const dispatch = useDispatch()\n    const {projects} = useSelector(state => state.projects)\n    const {currentProject} = useSelector(state => state.columns)\n    const [assignedTasks, setAssignedTasks] = useState([])\n    const {user} = useSelector(state => state.user)\n    const navigate = useNavigate()\n\n    const handleAddProject = async () => {\n        const newProject = await agent.project.add({title: \"New Project\"})\n        console.log(newProject)\n        //here i'll dispatch addProject action and add newProject\n        dispatch(addProject(newProject))\n        let projectsAsync = await agent.project.getAll()\n        dispatch(setProjects(projectsAsync))\n    }\n    \n    useEffect(() => {\n        async function fetchProjects(){\n            dispatch(setCurrentProject(null))\n            let projectsAsync = await agent.project.getAll()\n            dispatch(setProjects(projectsAsync))\n            let assignedTasks = await agent.task.getAssignedCards(user.id)\n            setAssignedTasks(assignedTasks)\n        }\n        fetchProjects();\n    }, [user])\n    \n    \n\n    const handleDeleteProject = async (id) => {\n        await agent.project.delete(id)\n        dispatch(deleteProject(id))\n    }\n    \n    return (\n        <>\n            <Typography variant=\"h3\" align=\"left\"  margin='50px' marginBottom='20px' letterSpacing={2}>My Projects:</Typography>\n        \n            <Grid container spacing={3} margin='30px'>\n                {projects.map(project => (\n        <Grid item xs={12} sm={8} md={3} lg={3} key={project.id}>\n        <Card\n            className='interactiveCard'\n            sx={{ maxWidth: 345 , bgcolor: '#ddd8c4' }}\n        >\n            <CardContent >\n                <Typography gutterBottom variant=\"h5\" component=\"div\" align=\"center\" onClick={() => {\n                    console.log(assignedTasks)\n                    navigate(`/projects/${project.id}`)\n                }}>\n                    {project.title}\n                </Typography>\n                \n            </CardContent>\n            <CardMedia align=\"right\">\n                <IconButton aria-label=\"delete\" onClick={() => handleDeleteProject(project.id)} >\n                    <DeleteIcon fontSize=\"small\"/>\n                </IconButton>\n            </CardMedia>\n            \n        </Card>\n        </Grid>    \n    ))}\n            <Grid item xs={3} >\n                    <Button sx={{color: \"#141E27\"}} size=\"small\" onClick={handleAddProject} variant=\"outlined\">Add Project</Button>\n            </Grid>\n        </Grid>\n\n            <Typography variant=\"h3\" align=\"left\"  margin='50px' marginBottom='20px' letterSpacing={2}>My Assigned Tasks:</Typography>\n          \n            <Grid container spacing={3} margin='30px'>\n                {assignedTasks.map(task => (\n                    <Grid item xs={12} sm={8} md={3} lg={3} key={task.id}>\n                        <Card\n                            className='interactiveCard'\n                            sx={{ maxWidth: 345 , bgcolor: '#ddd8c4' }}\n                        >\n                            <CardContent >\n                                <Typography gutterBottom variant=\"h5\" component=\"div\" align=\"left\" onClick={() => {\n                                    navigate(`/projects/${task.projectId}`)\n                                }}>\n                                    {task.title}\n                                    \n                                </Typography>\n                                \n                                    <Breadcrumbs aria-label=\"breadcrumb\">\n                                        <StyledBreadcrumb component=\"a\" label={task.projectTitle} />\n                                        <StyledBreadcrumb component=\"a\"  label={task.columnTitle} />\n                                    </Breadcrumbs>\n                                \n\n                            </CardContent>\n                            \n                        </Card>\n                    </Grid>\n                ))}\n            </Grid>    \n        </>\n    );\n};\n",{"ruleId":"260","severity":1,"message":"261","line":37,"column":12,"nodeType":"262","messageId":"263","endLine":37,"endColumn":14},{"ruleId":"260","severity":1,"message":"261","line":47,"column":12,"nodeType":"262","messageId":"263","endLine":47,"endColumn":14},{"ruleId":"264","severity":1,"message":"265","line":59,"column":13,"nodeType":"266","messageId":"267","endLine":59,"endColumn":20},{"ruleId":"268","severity":1,"message":"269","line":85,"column":7,"nodeType":"270","endLine":85,"endColumn":49,"suggestions":"271"},{"ruleId":"264","severity":1,"message":"272","line":4,"column":5,"nodeType":"266","messageId":"267","endLine":4,"endColumn":10},{"ruleId":"264","severity":1,"message":"273","line":6,"column":5,"nodeType":"266","messageId":"267","endLine":6,"endColumn":15},{"ruleId":"264","severity":1,"message":"274","line":8,"column":13,"nodeType":"266","messageId":"267","endLine":8,"endColumn":23},{"ruleId":"264","severity":1,"message":"275","line":10,"column":8,"nodeType":"266","messageId":"267","endLine":10,"endColumn":18},{"ruleId":"264","severity":1,"message":"276","line":11,"column":9,"nodeType":"266","messageId":"267","endLine":11,"endColumn":18},{"ruleId":"264","severity":1,"message":"277","line":14,"column":22,"nodeType":"266","messageId":"267","endLine":14,"endColumn":33},{"ruleId":"264","severity":1,"message":"278","line":20,"column":8,"nodeType":"266","messageId":"267","endLine":20,"endColumn":17},{"ruleId":"264","severity":1,"message":"279","line":21,"column":8,"nodeType":"266","messageId":"267","endLine":21,"endColumn":31},{"ruleId":"264","severity":1,"message":"280","line":22,"column":8,"nodeType":"266","messageId":"267","endLine":22,"endColumn":25},{"ruleId":"264","severity":1,"message":"281","line":23,"column":8,"nodeType":"266","messageId":"267","endLine":23,"endColumn":25},{"ruleId":"264","severity":1,"message":"282","line":47,"column":25,"nodeType":"266","messageId":"267","endLine":47,"endColumn":39},{"ruleId":"260","severity":1,"message":"261","line":67,"column":12,"nodeType":"262","messageId":"263","endLine":67,"endColumn":14},{"ruleId":"264","severity":1,"message":"283","line":96,"column":11,"nodeType":"266","messageId":"267","endLine":96,"endColumn":33},{"ruleId":"264","severity":1,"message":"284","line":22,"column":13,"nodeType":"266","messageId":"267","endLine":22,"endColumn":16},{"ruleId":"264","severity":1,"message":"285","line":14,"column":23,"nodeType":"266","messageId":"267","endLine":14,"endColumn":36},{"ruleId":"264","severity":1,"message":"286","line":24,"column":7,"nodeType":"266","messageId":"267","endLine":24,"endColumn":12},{"ruleId":"264","severity":1,"message":"287","line":27,"column":12,"nodeType":"266","messageId":"267","endLine":27,"endColumn":27},{"ruleId":"264","severity":1,"message":"288","line":35,"column":19,"nodeType":"266","messageId":"267","endLine":35,"endColumn":25},{"ruleId":"264","severity":1,"message":"285","line":10,"column":23,"nodeType":"266","messageId":"267","endLine":10,"endColumn":36},{"ruleId":"264","severity":1,"message":"286","line":20,"column":7,"nodeType":"266","messageId":"267","endLine":20,"endColumn":12},{"ruleId":"264","severity":1,"message":"287","line":23,"column":12,"nodeType":"266","messageId":"267","endLine":23,"endColumn":27},{"ruleId":"264","severity":1,"message":"274","line":7,"column":8,"nodeType":"266","messageId":"267","endLine":7,"endColumn":18},{"ruleId":"264","severity":1,"message":"289","line":11,"column":8,"nodeType":"266","messageId":"267","endLine":11,"endColumn":16},{"ruleId":"264","severity":1,"message":"290","line":14,"column":8,"nodeType":"266","messageId":"267","endLine":14,"endColumn":16},{"ruleId":"264","severity":1,"message":"291","line":17,"column":20,"nodeType":"266","messageId":"267","endLine":17,"endColumn":28},{"ruleId":"264","severity":1,"message":"292","line":21,"column":9,"nodeType":"266","messageId":"267","endLine":21,"endColumn":20},{"ruleId":"264","severity":1,"message":"293","line":21,"column":22,"nodeType":"266","messageId":"267","endLine":21,"endColumn":29},{"ruleId":"264","severity":1,"message":"294","line":69,"column":12,"nodeType":"266","messageId":"267","endLine":69,"endColumn":19},{"ruleId":"264","severity":1,"message":"295","line":70,"column":12,"nodeType":"266","messageId":"267","endLine":70,"endColumn":26},{"ruleId":"264","severity":1,"message":"296","line":71,"column":12,"nodeType":"266","messageId":"267","endLine":71,"endColumn":21},{"ruleId":"297","severity":1,"message":"298","line":170,"column":25,"nodeType":"299","endLine":170,"endColumn":66},{"ruleId":"300","severity":1,"message":"301","line":1,"column":1,"nodeType":"302","messageId":"263","endLine":12,"endColumn":2},{"ruleId":"264","severity":1,"message":"303","line":3,"column":9,"nodeType":"266","messageId":"267","endLine":3,"endColumn":18},{"ruleId":"304","severity":1,"message":"305","line":26,"column":32,"nodeType":"306","messageId":"263","endLine":26,"endColumn":34},{"ruleId":"268","severity":1,"message":"307","line":31,"column":8,"nodeType":"270","endLine":31,"endColumn":25,"suggestions":"308"},{"ruleId":"264","severity":1,"message":"309","line":33,"column":11,"nodeType":"266","messageId":"267","endLine":33,"endColumn":21},{"ruleId":"264","severity":1,"message":"310","line":52,"column":15,"nodeType":"266","messageId":"267","endLine":52,"endColumn":29},{"ruleId":"264","severity":1,"message":"311","line":59,"column":15,"nodeType":"266","messageId":"267","endLine":59,"endColumn":25},{"ruleId":"264","severity":1,"message":"311","line":66,"column":15,"nodeType":"266","messageId":"267","endLine":66,"endColumn":25},{"ruleId":"264","severity":1,"message":"292","line":4,"column":5,"nodeType":"266","messageId":"267","endLine":4,"endColumn":16},{"ruleId":"264","severity":1,"message":"312","line":9,"column":5,"nodeType":"266","messageId":"267","endLine":9,"endColumn":16},{"ruleId":"264","severity":1,"message":"313","line":11,"column":17,"nodeType":"266","messageId":"267","endLine":11,"endColumn":21},{"ruleId":"264","severity":1,"message":"314","line":30,"column":8,"nodeType":"266","messageId":"267","endLine":30,"endColumn":15},{"ruleId":"264","severity":1,"message":"315","line":33,"column":8,"nodeType":"266","messageId":"267","endLine":33,"endColumn":18},{"ruleId":"264","severity":1,"message":"316","line":38,"column":9,"nodeType":"266","messageId":"267","endLine":38,"endColumn":14},{"ruleId":"264","severity":1,"message":"317","line":38,"column":16,"nodeType":"266","messageId":"267","endLine":38,"endColumn":22},{"ruleId":"264","severity":1,"message":"318","line":70,"column":12,"nodeType":"266","messageId":"267","endLine":70,"endColumn":29},{"ruleId":"264","severity":1,"message":"319","line":70,"column":31,"nodeType":"266","messageId":"267","endLine":70,"endColumn":51},{"ruleId":"264","severity":1,"message":"320","line":2,"column":8,"nodeType":"266","messageId":"267","endLine":2,"endColumn":12},{"ruleId":"264","severity":1,"message":"321","line":3,"column":8,"nodeType":"266","messageId":"267","endLine":3,"endColumn":20},{"ruleId":"264","severity":1,"message":"322","line":5,"column":8,"nodeType":"266","messageId":"267","endLine":5,"endColumn":13},{"ruleId":"264","severity":1,"message":"323","line":6,"column":36,"nodeType":"266","messageId":"267","endLine":6,"endColumn":50},{"ruleId":"264","severity":1,"message":"324","line":13,"column":8,"nodeType":"266","messageId":"267","endLine":13,"endColumn":14},{"ruleId":"264","severity":1,"message":"325","line":14,"column":9,"nodeType":"266","messageId":"267","endLine":14,"endColumn":21},{"ruleId":"264","severity":1,"message":"326","line":29,"column":11,"nodeType":"266","messageId":"267","endLine":29,"endColumn":21},{"ruleId":"264","severity":1,"message":"327","line":3,"column":34,"nodeType":"266","messageId":"267","endLine":3,"endColumn":38},{"ruleId":"264","severity":1,"message":"328","line":3,"column":40,"nodeType":"266","messageId":"267","endLine":3,"endColumn":48},{"ruleId":"264","severity":1,"message":"323","line":3,"column":50,"nodeType":"266","messageId":"267","endLine":3,"endColumn":64},{"ruleId":"264","severity":1,"message":"329","line":3,"column":66,"nodeType":"266","messageId":"267","endLine":3,"endColumn":78},{"ruleId":"264","severity":1,"message":"303","line":15,"column":8,"nodeType":"266","messageId":"267","endLine":15,"endColumn":17},{"ruleId":"264","severity":1,"message":"330","line":16,"column":8,"nodeType":"266","messageId":"267","endLine":16,"endColumn":14},{"ruleId":"264","severity":1,"message":"331","line":22,"column":12,"nodeType":"266","messageId":"267","endLine":22,"endColumn":28},{"ruleId":"264","severity":1,"message":"332","line":28,"column":15,"nodeType":"266","messageId":"267","endLine":28,"endColumn":29},{"ruleId":"264","severity":1,"message":"332","line":34,"column":15,"nodeType":"266","messageId":"267","endLine":34,"endColumn":29},{"ruleId":"264","severity":1,"message":"333","line":38,"column":11,"nodeType":"266","messageId":"267","endLine":38,"endColumn":24},{"ruleId":"264","severity":1,"message":"330","line":3,"column":8,"nodeType":"266","messageId":"267","endLine":3,"endColumn":14},{"ruleId":"264","severity":1,"message":"321","line":5,"column":5,"nodeType":"266","messageId":"267","endLine":5,"endColumn":17},{"ruleId":"264","severity":1,"message":"334","line":5,"column":19,"nodeType":"266","messageId":"267","endLine":5,"endColumn":36},{"ruleId":"264","severity":1,"message":"335","line":9,"column":5,"nodeType":"266","messageId":"267","endLine":9,"endColumn":17},{"ruleId":"264","severity":1,"message":"336","line":11,"column":5,"nodeType":"266","messageId":"267","endLine":11,"endColumn":12},{"ruleId":"264","severity":1,"message":"274","line":13,"column":5,"nodeType":"266","messageId":"267","endLine":13,"endColumn":15},{"ruleId":"264","severity":1,"message":"337","line":20,"column":9,"nodeType":"266","messageId":"267","endLine":20,"endColumn":16},{"ruleId":"264","severity":1,"message":"338","line":25,"column":11,"nodeType":"266","messageId":"267","endLine":25,"endColumn":19},{"ruleId":"264","severity":1,"message":"339","line":26,"column":12,"nodeType":"266","messageId":"267","endLine":26,"endColumn":16},{"ruleId":"264","severity":1,"message":"340","line":28,"column":12,"nodeType":"266","messageId":"267","endLine":28,"endColumn":20},{"ruleId":"264","severity":1,"message":"341","line":28,"column":22,"nodeType":"266","messageId":"267","endLine":28,"endColumn":33},{"ruleId":"264","severity":1,"message":"296","line":32,"column":12,"nodeType":"266","messageId":"267","endLine":32,"endColumn":21},{"ruleId":"264","severity":1,"message":"338","line":11,"column":11,"nodeType":"266","messageId":"267","endLine":11,"endColumn":19},{"ruleId":"264","severity":1,"message":"340","line":14,"column":12,"nodeType":"266","messageId":"267","endLine":14,"endColumn":20},{"ruleId":"264","severity":1,"message":"341","line":14,"column":22,"nodeType":"266","messageId":"267","endLine":14,"endColumn":33},{"ruleId":"264","severity":1,"message":"296","line":18,"column":12,"nodeType":"266","messageId":"267","endLine":18,"endColumn":21},{"ruleId":"264","severity":1,"message":"292","line":5,"column":5,"nodeType":"266","messageId":"267","endLine":5,"endColumn":16},{"ruleId":"264","severity":1,"message":"320","line":6,"column":5,"nodeType":"266","messageId":"267","endLine":6,"endColumn":9},{"ruleId":"264","severity":1,"message":"342","line":8,"column":5,"nodeType":"266","messageId":"267","endLine":8,"endColumn":8},{"ruleId":"264","severity":1,"message":"273","line":11,"column":5,"nodeType":"266","messageId":"267","endLine":11,"endColumn":15},{"ruleId":"264","severity":1,"message":"313","line":12,"column":5,"nodeType":"266","messageId":"267","endLine":12,"endColumn":9},{"ruleId":"264","severity":1,"message":"343","line":13,"column":5,"nodeType":"266","messageId":"267","endLine":13,"endColumn":10},{"ruleId":"264","severity":1,"message":"336","line":14,"column":5,"nodeType":"266","messageId":"267","endLine":14,"endColumn":12},{"ruleId":"264","severity":1,"message":"344","line":19,"column":22,"nodeType":"266","messageId":"267","endLine":19,"endColumn":29},{"ruleId":"264","severity":1,"message":"345","line":19,"column":31,"nodeType":"266","messageId":"267","endLine":19,"endColumn":38},{"ruleId":"264","severity":1,"message":"346","line":25,"column":5,"nodeType":"266","messageId":"267","endLine":25,"endColumn":17},{"ruleId":"264","severity":1,"message":"275","line":33,"column":8,"nodeType":"266","messageId":"267","endLine":33,"endColumn":18},{"ruleId":"264","severity":1,"message":"303","line":34,"column":8,"nodeType":"266","messageId":"267","endLine":34,"endColumn":17},{"ruleId":"264","severity":1,"message":"294","line":41,"column":12,"nodeType":"266","messageId":"267","endLine":41,"endColumn":19},{"ruleId":"264","severity":1,"message":"295","line":42,"column":12,"nodeType":"266","messageId":"267","endLine":42,"endColumn":26},{"ruleId":"264","severity":1,"message":"347","line":53,"column":11,"nodeType":"266","messageId":"267","endLine":53,"endColumn":19},{"ruleId":"268","severity":1,"message":"348","line":57,"column":15,"nodeType":"349","endLine":74,"endColumn":6},{"ruleId":"268","severity":1,"message":"350","line":74,"column":7,"nodeType":"270","endLine":74,"endColumn":17,"suggestions":"351"},{"ruleId":"264","severity":1,"message":"352","line":9,"column":22,"nodeType":"266","messageId":"267","endLine":9,"endColumn":31},{"ruleId":"264","severity":1,"message":"342","line":10,"column":5,"nodeType":"266","messageId":"267","endLine":10,"endColumn":8},{"ruleId":"264","severity":1,"message":"313","line":13,"column":5,"nodeType":"266","messageId":"267","endLine":13,"endColumn":9},{"ruleId":"264","severity":1,"message":"295","line":39,"column":12,"nodeType":"266","messageId":"267","endLine":39,"endColumn":26},{"ruleId":"268","severity":1,"message":"353","line":62,"column":8,"nodeType":"270","endLine":62,"endColumn":14,"suggestions":"354"},"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-unused-vars","'monitor' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'projectId'. Either include it or remove the dependency array. If 'setTasks' needs the current value of 'projectId', you can also switch to useReducer instead of useState and read 'projectId' in the reducer.","ArrayExpression",["355"],"'Badge' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'DeleteIcon' is defined but never used.","'useEffect' is defined but never used.","'useSelector' is defined but never used.","'NotesIcon' is defined but never used.","'ModeCommentOutlinedIcon' is defined but never used.","'LabelOutlinedIcon' is defined but never used.","'GroupOutlinedIcon' is defined but never used.","'setUpdatedTask' is assigned a value but never used.","'handleTaskUpdateSubmit' is assigned a value but never used.","'err' is assigned a value but never used.","'ThemeProvider' is defined but never used.","'theme' is assigned a value but never used.","'isAuthenticated' is assigned a value but never used.","'result' is assigned a value but never used.","'MenuIcon' is defined but never used.","'MoreIcon' is defined but never used.","'useState' is defined but never used.","'AvatarGroup' is defined but never used.","'Divider' is defined but never used.","'members' is assigned a value but never used.","'currentProject' is assigned a value but never used.","'projectId' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-extend-native","String prototype is read only, properties should not be added.","AssignmentExpression","'Container' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook useEffect has missing dependencies: 'comment.likes' and 'user.id'. Either include them or remove the dependency array.",["356"],"'checkLiked' is assigned a value but never used.","'deletedComment' is assigned a value but never used.","'newComment' is assigned a value but never used.","'FormControl' is defined but never used.","'Link' is defined but never used.","'AddIcon' is defined but never used.","'RemoveIcon' is defined but never used.","'alpha' is defined but never used.","'styled' is defined but never used.","'assignedToClicked' is assigned a value but never used.","'setAssignedToClicked' is assigned a value but never used.","'Chip' is defined but never used.","'Autocomplete' is defined but never used.","'Stack' is defined but never used.","'ListItemAvatar' is defined but never used.","'Avatar' is defined but never used.","'stringAvatar' is defined but never used.","'labelsText' is assigned a value but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'Button' is defined but never used.","'addMemberClicked' is assigned a value but never used.","'updatedProject' is assigned a value but never used.","'renderMembers' is assigned a value but never used.","'ClickAwayListener' is defined but never used.","'ListItemIcon' is defined but never used.","'Popover' is defined but never used.","'setTask' is defined but never used.","'dispatch' is assigned a value but never used.","'task' is assigned a value but never used.","'anchorEl' is assigned a value but never used.","'setAnchorEl' is assigned a value but never used.","'Fab' is defined but never used.","'Paper' is defined but never used.","'useDrag' is defined but never used.","'useDrop' is defined but never used.","'deleteColumn' is defined but never used.","'navigate' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'columns' and 'projectId'. Either include them or remove the dependency array.",["357"],"'emphasize' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["358"],{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},"Update the dependencies array to be: [task, column.id, dropped, columns, column, projectId]",{"range":"367","text":"368"},"Update the dependencies array to be: [liked, comments, comment.likes, user.id]",{"range":"369","text":"370"},"Update the dependencies array to be: [columns, dispatch, projectId]",{"range":"371","text":"372"},"Update the dependencies array to be: [dispatch, user]",{"range":"373","text":"374"},[2805,2847],"[task, column.id, dropped, columns, column, projectId]",[1069,1086],"[liked, comments, comment.likes, user.id]",[2015,2025],"[columns, dispatch, projectId]",[1991,1997],"[dispatch, user]"]