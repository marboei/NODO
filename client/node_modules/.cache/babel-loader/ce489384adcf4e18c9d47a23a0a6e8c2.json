{"ast":null,"code":"import { useEffect } from 'react';\nimport { useDragDropManager } from './useDragDropManager.mjs';\nimport { useCollector } from './useCollector.mjs';\n/**\n * useDragLayer Hook\n * @param collector The property collector\n */\n\nexport function useDragLayer(collect) {\n  const dragDropManager = useDragDropManager();\n  const monitor = dragDropManager.getMonitor();\n  const [collected, updateCollected] = useCollector(monitor, collect);\n  useEffect(() => monitor.subscribeToOffsetChange(updateCollected));\n  useEffect(() => monitor.subscribeToStateChange(updateCollected));\n  return collected;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,SAASC,kBAAT,QAAmC,0BAAnC;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;;;;;AAIA,OAAM,SAAUC,YAAV,CACLC,OADK,EAEY;AACjB,QAAMC,eAAe,GAAGJ,kBAAkB,EAA1C;AACA,QAAMK,OAAO,GAAGD,eAAe,CAACE,UAAhBF,EAAhB;AACA,QAAK,CAAEG,SAAF,EAAaC,eAAb,IAAgCP,YAAY,CAACI,OAAD,EAAUF,OAAV,CAAjD;AAEAJ,WAAS,OAAOM,OAAO,CAACI,uBAARJ,CAAgCG,eAAhCH,CAAP,CAATN;AACAA,WAAS,OAAOM,OAAO,CAACK,sBAARL,CAA+BG,eAA/BH,CAAP,CAATN;AACA,SAAOQ,SAAP;AACA","names":["useEffect","useDragDropManager","useCollector","useDragLayer","collect","dragDropManager","monitor","getMonitor","collected","updateCollected","subscribeToOffsetChange","subscribeToStateChange"],"sources":["/home/marboi/Work/dotnet/NoDo/client/node_modules/react-dnd/src/hooks/useDragLayer.ts"],"sourcesContent":["import { useEffect } from 'react'\nimport type { DragLayerMonitor } from '../types/index.js'\nimport { useDragDropManager } from './useDragDropManager.js'\nimport { useCollector } from './useCollector.js'\n\n/**\n * useDragLayer Hook\n * @param collector The property collector\n */\nexport function useDragLayer<CollectedProps, DragObject = any>(\n\tcollect: (monitor: DragLayerMonitor<DragObject>) => CollectedProps,\n): CollectedProps {\n\tconst dragDropManager = useDragDropManager()\n\tconst monitor = dragDropManager.getMonitor()\n\tconst [collected, updateCollected] = useCollector(monitor, collect)\n\n\tuseEffect(() => monitor.subscribeToOffsetChange(updateCollected))\n\tuseEffect(() => monitor.subscribeToStateChange(updateCollected))\n\treturn collected\n}\n"]},"metadata":{},"sourceType":"module"}