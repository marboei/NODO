{"ast":null,"code":"// cheap lodash replacements\n\n/**\n * drop-in replacement for _.get\n * @param obj\n * @param path\n * @param defaultValue\n */\nexport function get(obj, path, defaultValue) {\n  return path.split('.').reduce((a, c) => a && a[c] ? a[c] : defaultValue || null, obj);\n}\n/**\n * drop-in replacement for _.without\n */\n\nexport function without(items, item) {\n  return items.filter(i => i !== item);\n}\n/**\n * drop-in replacement for _.isString\n * @param input\n */\n\nexport function isString(input) {\n  return typeof input === 'string';\n}\n/**\n * drop-in replacement for _.isString\n * @param input\n */\n\nexport function isObject(input) {\n  return typeof input === 'object';\n}\n/**\n * replacement for _.xor\n * @param itemsA\n * @param itemsB\n */\n\nexport function xor(itemsA, itemsB) {\n  const map = new Map();\n\n  const insertItem = item => {\n    map.set(item, map.has(item) ? map.get(item) + 1 : 1);\n  };\n\n  itemsA.forEach(insertItem);\n  itemsB.forEach(insertItem);\n  const result = [];\n  map.forEach((count, key) => {\n    if (count === 1) {\n      result.push(key);\n    }\n  });\n  return result;\n}\n/**\n * replacement for _.intersection\n * @param itemsA\n * @param itemsB\n */\n\nexport function intersection(itemsA, itemsB) {\n  return itemsA.filter(t => itemsB.indexOf(t) > -1);\n}","map":{"version":3,"mappings":"AAAA;;AAEA;;;;;;AAMA,OAAM,SAAUA,GAAV,CAAiBC,GAAjB,EAA2BC,IAA3B,EAAyCC,YAAzC,EAA6D;AAClE,SAAOD,IAAI,CACTE,KADKF,CACC,GADDA,EAELG,MAFKH,CAEC,CAAEI,CAAF,EAAKC,CAAL,KAAYD,CAAC,IAAIA,CAAC,CAACC,CAAD,CAAND,GAAYA,CAAC,CAACC,CAAD,CAAbD,GAAmBH,YAAY,IAAI,IAFhDD,EAEuDD,GAFvDC,CAAP;AAGA;AAED;;;;AAGA,OAAM,SAAUM,OAAV,CAAqBC,KAArB,EAAiCC,IAAjC,EAA+C;AACpD,SAAOD,KAAK,CAACE,MAANF,CAAcG,CAAF,IAAQA,CAAC,KAAKF,IAA1BD,CAAP;AACA;AAED;;;;;AAIA,OAAM,SAAUI,QAAV,CAAmBC,KAAnB,EAAwC;AAC7C,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACA;AAED;;;;;AAIA,OAAM,SAAUC,QAAV,CAAmBD,KAAnB,EAAwC;AAC7C,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACA;AAED;;;;;;AAKA,OAAM,SAAUE,GAAV,CAAyCC,MAAzC,EAAsDC,MAAtD,EAAwE;AAC7E,QAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;;AACA,QAAMC,UAAU,GAAIX,IAAJ,IAAgB;AAC/BS,OAAG,CAACG,GAAJH,CAAQT,IAARS,EAAcA,GAAG,CAACI,GAAJJ,CAAQT,IAARS,IAAiBA,GAAG,CAACnB,GAAJmB,CAAQT,IAARS,IAA2B,CAA5CA,GAAgD,CAA9DA;AACA,GAFD;;AAGAF,QAAM,CAACO,OAAPP,CAAeI,UAAfJ;AACAC,QAAM,CAACM,OAAPN,CAAeG,UAAfH;AAEA,QAAMO,MAAM,GAAQ,EAApB;AACAN,KAAG,CAACK,OAAJL,CAAW,CAAEO,KAAF,EAASC,GAAT,KAAiB;AAC3B,QAAID,KAAK,KAAK,CAAd,EAAiB;AAChBD,YAAM,CAACG,IAAPH,CAAYE,GAAZF;AACA;AACD,GAJDN;AAKA,SAAOM,MAAP;AACA;AAED;;;;;;AAKA,OAAM,SAAUI,YAAV,CAA0BZ,MAA1B,EAAuCC,MAAvC,EAAyD;AAC9D,SAAOD,MAAM,CAACN,MAAPM,CAAea,CAAF,IAAQZ,MAAM,CAACa,OAAPb,CAAeY,CAAfZ,IAAgB,CAAK,CAA1CD,CAAP;AACA","names":["get","obj","path","defaultValue","split","reduce","a","c","without","items","item","filter","i","isString","input","isObject","xor","itemsA","itemsB","map","Map","insertItem","set","has","forEach","result","count","key","push","intersection","t","indexOf"],"sources":["/home/marboi/Work/dotnet/NoDo/client/node_modules/dnd-core/src/utils/js_utils.ts"],"sourcesContent":["// cheap lodash replacements\n\n/**\n * drop-in replacement for _.get\n * @param obj\n * @param path\n * @param defaultValue\n */\nexport function get<T>(obj: any, path: string, defaultValue: T): T {\n\treturn path\n\t\t.split('.')\n\t\t.reduce((a, c) => (a && a[c] ? a[c] : defaultValue || null), obj) as T\n}\n\n/**\n * drop-in replacement for _.without\n */\nexport function without<T>(items: T[], item: T): T[] {\n\treturn items.filter((i) => i !== item)\n}\n\n/**\n * drop-in replacement for _.isString\n * @param input\n */\nexport function isString(input: any): boolean {\n\treturn typeof input === 'string'\n}\n\n/**\n * drop-in replacement for _.isString\n * @param input\n */\nexport function isObject(input: any): boolean {\n\treturn typeof input === 'object'\n}\n\n/**\n * replacement for _.xor\n * @param itemsA\n * @param itemsB\n */\nexport function xor<T extends string | number>(itemsA: T[], itemsB: T[]): T[] {\n\tconst map = new Map<T, number>()\n\tconst insertItem = (item: T) => {\n\t\tmap.set(item, map.has(item) ? (map.get(item) as number) + 1 : 1)\n\t}\n\titemsA.forEach(insertItem)\n\titemsB.forEach(insertItem)\n\n\tconst result: T[] = []\n\tmap.forEach((count, key) => {\n\t\tif (count === 1) {\n\t\t\tresult.push(key)\n\t\t}\n\t})\n\treturn result\n}\n\n/**\n * replacement for _.intersection\n * @param itemsA\n * @param itemsB\n */\nexport function intersection<T>(itemsA: T[], itemsB: T[]): T[] {\n\treturn itemsA.filter((t) => itemsB.indexOf(t) > -1)\n}\n"]},"metadata":{},"sourceType":"module"}