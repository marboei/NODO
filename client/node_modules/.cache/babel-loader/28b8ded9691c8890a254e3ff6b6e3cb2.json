{"ast":null,"code":"var _jsxFileName = \"/home/marboi/Work/dotnet/NoDo/client/src/Pages/ProjectPage.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { Column } from \"../Components/Column\";\nimport { Fab, Grid } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport agent from \"../Data/agent\";\nimport AddIcon from '@mui/icons-material/Add';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProjectPage = () => {\n  _s();\n\n  const [columns, setColumns] = useState([]);\n  useEffect(() => {\n    async function fetchColumns() {\n      setColumns(await agent.column.getAll());\n    }\n\n    fetchColumns();\n  }, []);\n\n  const handleDeleteColumn = async id => {\n    let newColumns = columns.filter(column => column.id !== id);\n    setColumns(newColumns);\n    await agent.column.delete(id);\n  }; //updates existing task and passes the function to child component(Task) to take as a parameter the existing task id and the updated task\n\n\n  const updateColumn = async (updatedColumn, id) => {\n    let updatedColumns = columns;\n    updatedColumns.forEach(task => {\n      if (task.id === updatedColumn.id) task.title = updatedColumn.title;\n    });\n    setColumns(updatedColumns);\n    await agent.column.update(id, updatedColumn);\n  };\n\n  const handleAddColumn = async () => {\n    const newColumn = await agent.column.add({\n      title: 'New column'\n    });\n    setColumns([...columns, newColumn]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [columns.map(column => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(Column, {\n          column: column,\n          handleDeleteColumn: handleDeleteColumn,\n          updateColumn: updateColumn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this)\n      }, column.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        alignSelf: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Fab, {\n          color: \"secondary\",\n          \"aria-label\": \"add\",\n          sx: {\n            verticalAlign: 'middle'\n          },\n          onClick: handleAddColumn,\n          children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProjectPage, \"FGb4ECZkue8/xp6oBDaPDOM3qWY=\");\n\n_c = ProjectPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectPage\");","map":{"version":3,"sources":["/home/marboi/Work/dotnet/NoDo/client/src/Pages/ProjectPage.jsx"],"names":["React","Column","Fab","Grid","useEffect","useState","agent","AddIcon","ProjectPage","columns","setColumns","fetchColumns","column","getAll","handleDeleteColumn","id","newColumns","filter","delete","updateColumn","updatedColumn","updatedColumns","forEach","task","title","update","handleAddColumn","newColumn","add","map","verticalAlign"],"mappings":";;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,SAAQC,GAAR,EAAaC,IAAb,QAAwB,eAAxB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AAIAD,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeO,YAAf,GAA6B;AACzBD,MAAAA,UAAU,CAAC,MAAMJ,KAAK,CAACM,MAAN,CAAaC,MAAb,EAAP,CAAV;AACH;;AACDF,IAAAA,YAAY;AACf,GALQ,EAKP,EALO,CAAT;;AAOA,QAAMG,kBAAkB,GAAG,MAAOC,EAAP,IAAc;AACrC,QAAIC,UAAU,GAAGP,OAAO,CAACQ,MAAR,CAAgBL,MAAD,IAAYA,MAAM,CAACG,EAAP,KAAcA,EAAzC,CAAjB;AACAL,IAAAA,UAAU,CAACM,UAAD,CAAV;AACA,UAAMV,KAAK,CAACM,MAAN,CAAaM,MAAb,CAAoBH,EAApB,CAAN;AACH,GAJD,CAZ6B,CAkB7B;;;AACA,QAAMI,YAAY,GAAG,OAAOC,aAAP,EAAsBL,EAAtB,KAA6B;AAC9C,QAAIM,cAAc,GAAGZ,OAArB;AACAY,IAAAA,cAAc,CAACC,OAAf,CAAwBC,IAAD,IAAU;AAC7B,UAAIA,IAAI,CAACR,EAAL,KAAYK,aAAa,CAACL,EAA9B,EAAkCQ,IAAI,CAACC,KAAL,GAAaJ,aAAa,CAACI,KAA3B;AACrC,KAFD;AAGAd,IAAAA,UAAU,CAACW,cAAD,CAAV;AACA,UAAMf,KAAK,CAACM,MAAN,CAAaa,MAAb,CAAoBV,EAApB,EAAwBK,aAAxB,CAAN;AACH,GAPD;;AASA,QAAMM,eAAe,GAAG,YAAY;AAChC,UAAMC,SAAS,GAAG,MAAMrB,KAAK,CAACM,MAAN,CAAagB,GAAb,CAAiB;AAACJ,MAAAA,KAAK,EAAE;AAAR,KAAjB,CAAxB;AACAd,IAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAakB,SAAb,CAAD,CAAV;AACH,GAHD;;AAMA,sBACI;AAAA,2BAEI,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA,iBACKlB,OAAO,CAACoB,GAAR,CAAYjB,MAAM,iBACf,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,+BACI,QAAC,MAAD;AAAQ,UAAA,MAAM,EAAEA,MAAhB;AAAwB,UAAA,kBAAkB,EAAEE,kBAA5C;AAAgE,UAAA,YAAY,EAAEK;AAA9E;AAAA;AAAA;AAAA;AAAA;AADJ,SAAuBP,MAAM,CAACG,EAA9B;AAAA;AAAA;AAAA;AAAA,cADH,CADL,eAMI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAkB,QAAA,SAAS,EAAC,QAA5B;AAAA,+BACI,QAAC,GAAD;AAAK,UAAA,KAAK,EAAC,WAAX;AAAuB,wBAAW,KAAlC;AAAwC,UAAA,EAAE,EAAE;AAACe,YAAAA,aAAa,EAAE;AAAhB,WAA5C;AAAuE,UAAA,OAAO,EAAEJ,eAAhF;AAAA,iCACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CAnDM;;GAAMlB,W;;KAAAA,W","sourcesContent":["\nimport * as React from 'react';\nimport {Column} from \"../Components/Column\";\nimport {Fab, Grid} from \"@mui/material\";\nimport {useEffect, useState} from \"react\";\nimport agent from \"../Data/agent\";\nimport AddIcon from '@mui/icons-material/Add';\n\n\nexport const ProjectPage = () => {\n    const [columns, setColumns] = useState([]);\n    \n   \n\n    useEffect(() => {\n        async function fetchColumns(){\n            setColumns(await agent.column.getAll())\n        }\n        fetchColumns();\n    },[])\n    \n    const handleDeleteColumn = async (id) => {\n        let newColumns = columns.filter((column) => column.id !== id)\n        setColumns(newColumns)\n        await agent.column.delete(id)\n    }\n\n    //updates existing task and passes the function to child component(Task) to take as a parameter the existing task id and the updated task\n    const updateColumn = async (updatedColumn, id) => {\n        let updatedColumns = columns\n        updatedColumns.forEach((task) => {\n            if (task.id === updatedColumn.id) task.title = updatedColumn.title\n        })\n        setColumns(updatedColumns)\n        await agent.column.update(id, updatedColumn)\n    }\n    \n    const handleAddColumn = async () => {\n        const newColumn = await agent.column.add({title: 'New column'})\n        setColumns([...columns, newColumn])\n    }\n    \n    \n    return (\n        <div>\n            {/*renders all columns*/}\n            <Grid container>\n                {columns.map(column =>  (\n                    <Grid item xs={3} key={column.id}>\n                        <Column column={column} handleDeleteColumn={handleDeleteColumn} updateColumn={updateColumn}/>\n                    </Grid>\n                ))}\n                <Grid item xs={3} alignSelf='center'>\n                    <Fab color=\"secondary\" aria-label=\"add\" sx={{verticalAlign: 'middle'}} onClick={handleAddColumn}>\n                        <AddIcon />\n                    </Fab>\n                </Grid>\n            </Grid>\n        </div>\n    );\n};"]},"metadata":{},"sourceType":"module"}