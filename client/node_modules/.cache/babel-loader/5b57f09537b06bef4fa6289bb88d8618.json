{"ast":null,"code":"var _jsxFileName = \"/home/marboi/Work/dotnet/NoDo/client/src/Components/Column.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { Card, CardContent, TextField, Typography } from \"@mui/material\";\nimport { Task } from \"./Task\";\nimport { useEffect, useState } from \"react\";\nimport agent from \"../Data/agent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Column = _ref => {\n  _s();\n\n  let {\n    column\n  } = _ref;\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState(''); //fetches tasks from db according to it's column and stores them in tasks state\n\n  useEffect(() => {\n    async function fetchTasks() {\n      setTasks(await agent.task.getAll(column.id));\n    }\n  }, [column.id]); //handles task deletion\n  //>passes this function to child component(Task) to take an individual task id as a parameter\n\n  const handleDelete = async id => {\n    let newTasks = tasks.filter(task => task.id !== id);\n    setTasks(newTasks);\n    await agent.task.delete(column.id, id);\n  }; //creates a new task after user submits the creation form\n\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (newTask) {\n      console.log(newTask);\n    }\n\n    const addedTask = await agent.task.add(column.id, {\n      title: newTask\n    });\n    setTasks([...tasks, addedTask]);\n    e.target.value = '';\n    setNewTask('');\n  }; //updates existing task and passes the function to child component(Task) to take as a parameter the existing task id and the updated task\n\n\n  const updateTask = async (updatedTask, id) => {\n    let updatedTasks = tasks;\n    updatedTasks.forEach(task => {\n      if (task.id === updatedTask.id) task.title = updatedTask.title;\n    });\n    setTasks(updatedTasks);\n    await agent.task.update(column.id, id, updatedTask);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        maxWidth: 400,\n        margin: 2,\n        bgcolor: '#a8a69e'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"h5\",\n          component: \"div\",\n          children: column.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n          task: task,\n          handleDelete: handleDelete,\n          updateTask: updateTask\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n          noValidate: true,\n          autoComplete: \"off\",\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            onChange: e => setNewTask(e.target.value),\n            value: newTask,\n            id: \"outlined-basic\",\n            label: \"New task\",\n            variant: \"outlined\",\n            sx: {\n              bgcolor: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Column, \"bPCx0+2jxyKSWrxqvYM6Q5jItg8=\");\n\n_c = Column;\n\nvar _c;\n\n$RefreshReg$(_c, \"Column\");","map":{"version":3,"sources":["/home/marboi/Work/dotnet/NoDo/client/src/Components/Column.jsx"],"names":["React","Card","CardContent","TextField","Typography","Task","useEffect","useState","agent","Column","column","tasks","setTasks","newTask","setNewTask","fetchTasks","task","getAll","id","handleDelete","newTasks","filter","delete","handleSubmit","e","preventDefault","console","log","addedTask","add","title","target","value","updateTask","updatedTask","updatedTasks","forEach","update","maxWidth","margin","bgcolor","map"],"mappings":"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","sourcesContent":["\nimport * as React from 'react';\nimport {\n    Card,\n    CardContent,\n    TextField,\n    Typography\n} from \"@mui/material\";\nimport {Task} from \"./Task\";\nimport {useEffect, useState} from \"react\";\nimport agent from \"../Data/agent\";\n\nexport const Column = ({column}) => {\n    \n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState('');\n    \n    //fetches tasks from db according to it's column and stores them in tasks state\n    useEffect(() => {\n        async function fetchTasks(){\n            setTasks(await agent.task.getAll(column.id))\n        }\n        \n    },[column.id])\n    \n    //handles task deletion\n    //>passes this function to child component(Task) to take an individual task id as a parameter\n    const handleDelete = async (id) => {\n        let newTasks = tasks.filter((task) => task.id !== id)\n        setTasks(newTasks)\n        await agent.task.delete(column.id, id)\n    }\n    \n    //creates a new task after user submits the creation form\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (newTask) {\n            console.log(newTask);\n        }\n\n        const addedTask = await agent.task.add(column.id, {title: newTask})\n        setTasks([...tasks, addedTask])\n        \n        e.target.value = ''\n        setNewTask('')\n    }\n    \n    //updates existing task and passes the function to child component(Task) to take as a parameter the existing task id and the updated task\n    const updateTask = async (updatedTask, id) => {\n        let updatedTasks = tasks\n        updatedTasks.forEach((task) => {\n            if (task.id === updatedTask.id) task.title = updatedTask.title\n        })\n        setTasks(updatedTasks)\n        await agent.task.update(column.id, id, updatedTask)\n    }\n\n    \n    return (\n        <div>\n            {/*renders tasks inside column*/}\n            <Card sx={{ maxWidth: 400, margin: 2, bgcolor: '#a8a69e' }}>\n                <CardContent>\n                    {/*column header*/}\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\n                        {column.title}\n                    </Typography>\n                    {/*renders all tasks*/}\n                    {tasks.map(task => (\n                            <Task key={task.id} task={task} handleDelete={handleDelete} updateTask={updateTask} />\n                    ))}\n                    {/*renders new task form*/}\n                    <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <TextField onChange={(e) => setNewTask(e.target.value)} \n                                    value={newTask} id=\"outlined-basic\" label=\"New task\" variant=\"outlined\" sx={{bgcolor: 'white'}}/>\n                    </form>\n                   \n                </CardContent>\n            </Card>\n        </div>\n    );\n};"]},"metadata":{},"sourceType":"module"}