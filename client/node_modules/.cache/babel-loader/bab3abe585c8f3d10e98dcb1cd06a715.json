{"ast":null,"code":"import { reduce as dragOffset } from './dragOffset.mjs';\nimport { reduce as dragOperation } from './dragOperation.mjs';\nimport { reduce as refCount } from './refCount.mjs';\nimport { reduce as dirtyHandlerIds } from './dirtyHandlerIds.mjs';\nimport { reduce as stateId } from './stateId.mjs';\nimport { get } from '../utils/js_utils.mjs';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === \"function\") {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nexport function reduce() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  return {\n    dirtyHandlerIds: dirtyHandlerIds(state.dirtyHandlerIds, {\n      type: action.type,\n      payload: _objectSpread({}, action.payload, {\n        prevTargetIds: get(state, 'dragOperation.targetIds', [])\n      })\n    }),\n    dragOffset: dragOffset(state.dragOffset, action),\n    refCount: refCount(state.refCount, action),\n    dragOperation: dragOperation(state.dragOperation, action),\n    stateId: stateId(state.stateId)\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,IAAIC,UAAnB,QAA+D,kBAA/D;AACA,SACCD,MAAM,IAAIE,aADX,QAGO,qBAHP;AAIA,SAASF,MAAM,IAAIG,QAAnB,QAA2D,gBAA3D;AACA,SACCH,MAAM,IAAII,eADX,QAGO,uBAHP;AAIA,SAASJ,MAAM,IAAIK,OAAnB,QAAyD,eAAzD;AACA,SAASC,GAAT,QAAoB,uBAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,OAAM,SAAUN,MAAV,GAAyE;AAAA,MAAxDO,KAAwD,uEAAzC,EAAyC;AAAA,MAA5BC,MAA4B;AAC9E,SAAO;AACNJ,mBAAe,EAAEA,eAAe,CAACG,KAAK,CAACH,eAAP,EAAwB;AACvDK,UAAI,EAAED,MAAM,CAACC,IAD0C;AAEvDC,aAAO,oBACHF,MAAM,CAACE,OADJ,EACW;AACjBC,qBAAa,EAAEL,GAAG,CAAWC,KAAX,EAAkB,yBAAlB,EAA6C,EAA7C;AADD,OADX;AAFgD,KAAxB,CAD1B;AAQNN,cAAU,EAAEA,UAAU,CAACM,KAAK,CAACN,UAAP,EAAmBO,MAAnB,CARhB;AASNL,YAAQ,EAAEA,QAAQ,CAACI,KAAK,CAACJ,QAAP,EAAiBK,MAAjB,CATZ;AAUNN,iBAAa,EAAEA,aAAa,CAACK,KAAK,CAACL,aAAP,EAAsBM,MAAtB,CAVtB;AAWNH,WAAO,EAAEA,OAAO,CAACE,KAAK,CAACF,OAAP;AAXV,GAAP;AAaA","names":["reduce","dragOffset","dragOperation","refCount","dirtyHandlerIds","stateId","get","state","action","type","payload","prevTargetIds"],"sources":["/home/marboi/Work/dotnet/NoDo/client/node_modules/dnd-core/src/reducers/index.ts"],"sourcesContent":["import { reduce as dragOffset, State as DragOffsetState } from './dragOffset.js'\nimport {\n\treduce as dragOperation,\n\tState as DragOperationState,\n} from './dragOperation.js'\nimport { reduce as refCount, State as RefCountState } from './refCount.js'\nimport {\n\treduce as dirtyHandlerIds,\n\tState as DirtyHandlerIdsState,\n} from './dirtyHandlerIds.js'\nimport { reduce as stateId, State as StateIdState } from './stateId.js'\nimport { get } from '../utils/js_utils.js'\nimport type { Action } from '../interfaces.js'\n\nexport interface State {\n\tdirtyHandlerIds: DirtyHandlerIdsState\n\tdragOffset: DragOffsetState\n\trefCount: RefCountState\n\tdragOperation: DragOperationState\n\tstateId: StateIdState\n}\n\nexport function reduce(state: State = {} as State, action: Action<any>): State {\n\treturn {\n\t\tdirtyHandlerIds: dirtyHandlerIds(state.dirtyHandlerIds, {\n\t\t\ttype: action.type,\n\t\t\tpayload: {\n\t\t\t\t...action.payload,\n\t\t\t\tprevTargetIds: get<string[]>(state, 'dragOperation.targetIds', []),\n\t\t\t},\n\t\t}),\n\t\tdragOffset: dragOffset(state.dragOffset, action),\n\t\trefCount: refCount(state.refCount, action),\n\t\tdragOperation: dragOperation(state.dragOperation, action),\n\t\tstateId: stateId(state.stateId),\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}