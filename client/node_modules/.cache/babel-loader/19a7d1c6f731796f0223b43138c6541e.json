{"ast":null,"code":"var _jsxFileName = \"/home/marboi/Work/dotnet/NoDo/client/src/Components/Column.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { Card, CardContent, Grid, IconButton, TextField, Typography } from \"@mui/material\";\nimport { Task } from \"./Task\";\nimport { useEffect, useState } from \"react\";\nimport agent from \"../Data/agent\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Column = _ref => {\n  _s();\n\n  let {\n    column,\n    handleDeleteColumn\n  } = _ref;\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState(''); //fetches tasks from db according to it's column and stores them in tasks state\n\n  useEffect(() => {\n    async function fetchTasks() {\n      setTasks(await agent.task.getAll(column.id));\n    }\n\n    fetchTasks();\n  }, [column.id]); //handles task deletion\n  //>passes this function to child component(Task) to take an individual task id as a parameter\n\n  const handleDelete = async id => {\n    let newTasks = tasks.filter(task => task.id !== id);\n    setTasks(newTasks);\n    await agent.task.delete(column.id, id);\n  }; //creates a new task after user submits the creation form\n\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (newTask) {\n      console.log(newTask);\n    }\n\n    const addedTask = await agent.task.add(column.id, {\n      title: newTask\n    });\n    setTasks([...tasks, addedTask]);\n    e.target.value = '';\n    setNewTask('');\n  }; //updates existing task and passes the function to child component(Task) to take as a parameter the existing task id and the updated task\n\n\n  const updateTask = async (updatedTask, id) => {\n    let updatedTasks = tasks;\n    updatedTasks.forEach(task => {\n      if (task.id === updatedTask.id) task.title = updatedTask.title;\n    });\n    setTasks(updatedTasks);\n    await agent.task.update(column.id, id, updatedTask);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        maxWidth: 400,\n        margin: 2,\n        bgcolor: '#a8a69e'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 8,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              children: column.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"delete\",\n              onClick: () => handleDeleteColumn(column.id),\n              children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n          task: task,\n          handleDelete: handleDelete,\n          updateTask: updateTask\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n          noValidate: true,\n          autoComplete: \"off\",\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            onChange: e => setNewTask(e.target.value),\n            value: newTask,\n            id: \"outlined-basic\",\n            label: \"New task\",\n            variant: \"outlined\",\n            sx: {\n              bgcolor: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Column, \"bPCx0+2jxyKSWrxqvYM6Q5jItg8=\");\n\n_c = Column;\n\nvar _c;\n\n$RefreshReg$(_c, \"Column\");","map":{"version":3,"sources":["/home/marboi/Work/dotnet/NoDo/client/src/Components/Column.jsx"],"names":["React","Card","CardContent","Grid","IconButton","TextField","Typography","Task","useEffect","useState","agent","DeleteIcon","Column","column","handleDeleteColumn","tasks","setTasks","newTask","setNewTask","fetchTasks","task","getAll","id","handleDelete","newTasks","filter","delete","handleSubmit","e","preventDefault","console","log","addedTask","add","title","target","value","updateTask","updatedTask","updatedTasks","forEach","update","maxWidth","margin","bgcolor","map"],"mappings":"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","sourcesContent":["\nimport * as React from 'react';\nimport {\n    Card,\n    CardContent, Grid, IconButton,\n    TextField,\n    Typography\n} from \"@mui/material\";\nimport {Task} from \"./Task\";\nimport {useEffect, useState} from \"react\";\nimport agent from \"../Data/agent\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nexport const Column = ({column, handleDeleteColumn}) => {\n    \n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState('');\n    \n    //fetches tasks from db according to it's column and stores them in tasks state\n    useEffect(() => {\n        async function fetchTasks(){\n            setTasks(await agent.task.getAll(column.id))\n        }\n        fetchTasks();\n    },[column.id])\n    \n    //handles task deletion\n    //>passes this function to child component(Task) to take an individual task id as a parameter\n    const handleDelete = async (id) => {\n        let newTasks = tasks.filter((task) => task.id !== id)\n        setTasks(newTasks)\n        await agent.task.delete(column.id, id)\n    }\n    \n    //creates a new task after user submits the creation form\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (newTask) {\n            console.log(newTask);\n        }\n\n        const addedTask = await agent.task.add(column.id, {title: newTask})\n        setTasks([...tasks, addedTask])\n        \n        e.target.value = ''\n        setNewTask('')\n    }\n    \n    //updates existing task and passes the function to child component(Task) to take as a parameter the existing task id and the updated task\n    const updateTask = async (updatedTask, id) => {\n        let updatedTasks = tasks\n        updatedTasks.forEach((task) => {\n            if (task.id === updatedTask.id) task.title = updatedTask.title\n        })\n        setTasks(updatedTasks)\n        await agent.task.update(column.id, id, updatedTask)\n    }\n    \n    \n\n    \n    return (\n        <div>\n            {/*renders tasks inside column*/}\n            <Card sx={{ maxWidth: 400, margin: 2, bgcolor: '#a8a69e' }}>\n                <CardContent>\n                    {/*column header*/}\n                    <Grid container>\n                        <Grid item xs={8}>\n                            <Typography variant='h4'>\n                                {column.title}\n                            </Typography>\n                        </Grid>\n\n                        <Grid item xs={4}>\n                            <IconButton aria-label=\"delete\" onClick={() => handleDeleteColumn(column.id)} >\n                                <DeleteIcon fontSize=\"small\"/>\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                    \n                    {/*renders all tasks*/}\n                    {tasks.map(task => (\n                            <Task key={task.id} task={task} handleDelete={handleDelete} updateTask={updateTask} />\n                    ))}\n                    {/*renders new task form*/}\n                    <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <TextField onChange={(e) => setNewTask(e.target.value)} \n                                    value={newTask} id=\"outlined-basic\" label=\"New task\" variant=\"outlined\" sx={{bgcolor: 'white'}}/>\n                    </form>\n                   \n                </CardContent>\n            </Card>\n        </div>\n    );\n};"]},"metadata":{},"sourceType":"module"}