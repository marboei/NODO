{"ast":null,"code":"var _jsxFileName = \"/home/marboi/Work/dotnet/NoDo/client/src/Components/Column.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { Card, CardContent, ClickAwayListener, Grid, IconButton, TextField, Typography } from \"@mui/material\";\nimport { Task } from \"./Task\";\nimport { useEffect, useState } from \"react\";\nimport agent from \"../Data/agent\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { useDrop } from \"react-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Column = _ref => {\n  _s();\n\n  let {\n    column,\n    handleDeleteColumn,\n    updateColumn,\n    handleDrop\n  } = _ref;\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  const [columnClicked, setColumnClicked] = useState(false);\n  const [updatedColumn, setUpdatedColumn] = useState(column);\n  const [dropped, setDropped] = useState(false);\n  const [{\n    isOver,\n    monitor\n  }, drop] = useDrop(() => ({\n    accept: \"task\",\n    item: {\n      id: column.id\n    },\n    drop: async item => {\n      await addTaskToColumn(item.id, item.columnId, item.title);\n    }\n  })); //fetches tasks from db according to it's column and stores them in tasks state\n\n  useEffect(() => {\n    async function fetchTasks() {\n      setTasks(await agent.task.getAll(column.id));\n      setDropped(false);\n    }\n\n    fetchTasks();\n  }, [column.id, dropped]);\n\n  const addTaskToColumn = async (id, columnId, title) => {\n    const task = await agent.task.getById(columnId, id);\n    const addedTask = await agent.task.update(columnId, id, {\n      title: title,\n      columnId: column.id\n    });\n    setDropped(true);\n    console.log(tasks);\n  }; //handles task deletion\n  //>passes this function to child component(Task) to take an individual task id as a parameter\n\n\n  const handleDelete = async id => {\n    let newTasks = tasks.filter(task => task.id !== id);\n    setTasks(newTasks);\n    await agent.task.delete(column.id, id);\n  }; //creates a new task after user submits the creation form\n\n\n  const handleNewTaskSubmit = async e => {\n    e.preventDefault();\n    const addedTask = await agent.task.add(column.id, {\n      title: newTask\n    });\n    setTasks([...tasks, addedTask]);\n    e.target.value = '';\n    setNewTask('');\n  }; //updates existing task and passes the function to child component(Task) to take as a parameter the existing task id and the updated task\n\n\n  const updateTask = async (updatedTask, id) => {\n    let updatedTasks = tasks;\n    updatedTasks.forEach(task => {\n      if (task.id === updatedTask.id) task.title = updatedTask.title;\n    });\n    setTasks(updatedTasks);\n    await agent.task.update(column.id, id, updatedTask);\n  }; //changes the taskClicked state to true if a task is clicked \n\n\n  const handleColumnClick = () => {\n    setColumnClicked(true);\n  }; //changes taskClicked state to false if user clicks outside of card\n\n\n  const handleClickAway = () => {\n    setColumnClicked(false);\n  }; //handles the updated task form when submitted\n\n\n  const handleColumnUpdateSubmit = async e => {\n    e.preventDefault(); //called from parent component(Column)\n\n    updateColumn(updatedColumn, column.id);\n    setColumnClicked(false);\n  };\n\n  const removeTaskAfterDrag = id => {\n    const tasksAfterRemoved = tasks.filter(t => t.id !== id);\n    setTasks(tasksAfterRemoved);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        maxWidth: 400,\n        margin: 2,\n        bgcolor: '#a8a69e'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [columnClicked ? /*#__PURE__*/_jsxDEV(ClickAwayListener, {\n          onClickAway: handleClickAway,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            noValidate: true,\n            autoComplete: \"off\",\n            onSubmit: handleColumnUpdateSubmit,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              onChange: e => setUpdatedColumn({\n                id: column.id,\n                title: e.target.value\n              }),\n              value: updatedColumn.title,\n              id: \"outlined-basic\",\n              label: \"New task\",\n              variant: \"outlined\",\n              sx: {\n                bgcolor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 8,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              onClick: handleColumnClick,\n              children: column.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"delete\",\n              onClick: () => handleDeleteColumn(column.id),\n              children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n          task: task,\n          handleDelete: handleDelete,\n          updateTask: updateTask,\n          removeTaskAfterDrag: removeTaskAfterDrag\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n          noValidate: true,\n          autoComplete: \"off\",\n          onSubmit: handleNewTaskSubmit,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            onChange: e => setNewTask(e.target.value),\n            value: newTask,\n            id: \"outlined-basic\",\n            label: \"New task\",\n            variant: \"outlined\",\n            sx: {\n              bgcolor: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Column, \"EYiLYj/WhS0hEzgp2A9PkUkB4UY=\", false, function () {\n  return [useDrop];\n});\n\n_c = Column;\n\nvar _c;\n\n$RefreshReg$(_c, \"Column\");","map":{"version":3,"sources":["/home/marboi/Work/dotnet/NoDo/client/src/Components/Column.jsx"],"names":["React","Card","CardContent","ClickAwayListener","Grid","IconButton","TextField","Typography","Task","useEffect","useState","agent","DeleteIcon","useDrop","Column","column","handleDeleteColumn","updateColumn","handleDrop","tasks","setTasks","newTask","setNewTask","columnClicked","setColumnClicked","updatedColumn","setUpdatedColumn","dropped","setDropped","isOver","monitor","drop","accept","item","id","addTaskToColumn","columnId","title","fetchTasks","task","getAll","getById","addedTask","update","console","log","handleDelete","newTasks","filter","delete","handleNewTaskSubmit","e","preventDefault","add","target","value","updateTask","updatedTask","updatedTasks","forEach","handleColumnClick","handleClickAway","handleColumnUpdateSubmit","removeTaskAfterDrag","tasksAfterRemoved","t","maxWidth","margin","bgcolor","map"],"mappings":"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","sourcesContent":["\nimport * as React from 'react';\nimport {\n    Card,\n    CardContent, ClickAwayListener, Grid, IconButton,\n    TextField,\n    Typography\n} from \"@mui/material\";\nimport {Task} from \"./Task\";\nimport {useEffect, useState} from \"react\";\nimport agent from \"../Data/agent\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { useDrop } from \"react-dnd\";\n\nexport const Column = ({column, handleDeleteColumn, updateColumn , handleDrop}) => {\n    \n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState('');\n    const [columnClicked, setColumnClicked] = useState(false);\n    const [updatedColumn, setUpdatedColumn] = useState(column);\n    const [dropped, setDropped] = useState(false);\n    \n    \n    const [{isOver, monitor}, drop] = useDrop(() => ({\n        accept: \"task\",\n        item: {id: column.id},\n        drop: async (item) => {\n            await addTaskToColumn(item.id, item.columnId, item.title)\n        }\n    }))\n    \n    \n    \n    //fetches tasks from db according to it's column and stores them in tasks state\n    useEffect(() => {\n        async function fetchTasks(){\n            setTasks(await agent.task.getAll(column.id))\n            setDropped(false)\n        }\n        fetchTasks();\n    },[column.id, dropped])\n\n    const addTaskToColumn = async (id, columnId, title) => {\n\n        const task = await agent.task.getById(columnId, id)\n        const addedTask = await agent.task.update(columnId, id, {title: title, columnId: column.id})\n        setDropped(true)\n\n        console.log(tasks)\n    }\n    \n    //handles task deletion\n    //>passes this function to child component(Task) to take an individual task id as a parameter\n    const handleDelete = async (id) => {\n        let newTasks = tasks.filter((task) => task.id !== id)\n        setTasks(newTasks)\n        await agent.task.delete(column.id, id)\n    }\n    \n    //creates a new task after user submits the creation form\n    const handleNewTaskSubmit = async (e) => {\n        e.preventDefault();\n\n        const addedTask = await agent.task.add(column.id, {title: newTask})\n        setTasks([...tasks, addedTask])\n        \n        e.target.value = ''\n        setNewTask('')\n    }\n    \n    //updates existing task and passes the function to child component(Task) to take as a parameter the existing task id and the updated task\n    const updateTask = async (updatedTask, id) => {\n        let updatedTasks = tasks\n        updatedTasks.forEach((task) => {\n            if (task.id === updatedTask.id) task.title = updatedTask.title\n        })\n        setTasks(updatedTasks)\n        await agent.task.update(column.id, id, updatedTask)\n    }\n\n    //changes the taskClicked state to true if a task is clicked \n    const handleColumnClick = () => {\n        setColumnClicked(true)\n    };\n    //changes taskClicked state to false if user clicks outside of card\n    const handleClickAway = () => {\n        setColumnClicked(false);\n    };\n    //handles the updated task form when submitted\n    const handleColumnUpdateSubmit = async (e) => {\n        e.preventDefault();\n        //called from parent component(Column)\n        updateColumn(updatedColumn, column.id)\n        setColumnClicked(false);\n       \n    }\n    \n    const removeTaskAfterDrag = (id) => {\n        const tasksAfterRemoved = tasks.filter(t => t.id !== id)\n        setTasks(tasksAfterRemoved)\n    }\n    \n    return (\n        <div ref={drop}>\n            {/*renders tasks inside column*/}\n            <Card sx={{ maxWidth: 400, margin: 2, bgcolor: '#a8a69e' }}>\n                <CardContent >\n                    {\n                        columnClicked ? (\n                            <ClickAwayListener onClickAway={handleClickAway}>\n                                <form noValidate autoComplete=\"off\" onSubmit={handleColumnUpdateSubmit}>\n                                    <TextField\n                                        onChange={(e) => setUpdatedColumn({id: column.id, title: e.target.value})}\n                                        value={updatedColumn.title}  id=\"outlined-basic\" label=\"New task\" variant=\"outlined\" sx={{bgcolor: 'white'}}/>\n                                </form>\n                            </ClickAwayListener>\n\n                        ) : (\n                        <Grid container>\n                        <Grid item xs={8}>\n                        <Typography variant='h6' onClick={handleColumnClick}>\n                    {column.title}\n                        </Typography>\n                        </Grid>\n\n                        <Grid item xs={4}>\n                        <IconButton aria-label=\"delete\" onClick={() => handleDeleteColumn(column.id)} >\n                        <DeleteIcon fontSize=\"small\"/>\n                        </IconButton>\n                        </Grid>\n                        </Grid>\n                        )\n                    }\n                    \n                    {/*renders all tasks*/}\n                    {tasks.map(task => (\n                            <Task key={task.id} task={task} handleDelete={handleDelete} updateTask={updateTask} removeTaskAfterDrag={removeTaskAfterDrag} />\n                    ))}\n                    {/*renders new task form*/}\n                    <form noValidate autoComplete=\"off\" onSubmit={handleNewTaskSubmit}>\n                        <TextField onChange={(e) => setNewTask(e.target.value)} \n                                    value={newTask} id=\"outlined-basic\" label=\"New task\" variant=\"outlined\" sx={{bgcolor: 'white'}}/>\n                    </form>\n                   \n                </CardContent>\n            </Card>\n        </div>\n    );\n};"]},"metadata":{},"sourceType":"module"}