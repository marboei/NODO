{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _propTypes = require(\"prop-types\");\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar validNumericChars = /^[-+]?(?:[1-9][0-9]*(?:\\.[0-9]+)?|0|0\\.[0-9]+)$/;\n\nvar validator = function numericString(props, propName, componentName) {\n  if (props[propName] == null) {\n    return null;\n  }\n\n  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    rest[_key - 3] = arguments[_key];\n  }\n\n  var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));\n\n  if (stringError) {\n    return stringError;\n  }\n\n  var value = props[propName];\n  var passesRegex = validNumericChars.test(value);\n\n  if (passesRegex) {\n    return null;\n  }\n\n  return new TypeError(\"\".concat(componentName, \": prop \\\"\").concat(propName, \"\\\" (value \\\"\").concat(value, \"\\\") must be a numeric string:\\n    - starting with an optional + or -\\n    - that does not have a leading zero\\n    - with an optional decimal part (that contains only one decimal point, if present)\\n    - that otherwise only contains digits (0-9)\\n    - not +-NaN, or +-Infinity\\n  \"));\n};\n\nvalidator.isRequired = function numericStringRequired(props, propName, componentName) {\n  if (props[propName] == null) {\n    return new TypeError(\"\".concat(componentName, \": \").concat(propName, \" is required\"));\n  }\n\n  for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n    rest[_key2 - 3] = arguments[_key2];\n  }\n\n  return validator.apply(void 0, [props, propName, componentName].concat(rest));\n};\n\nvar _default = function _default() {\n  return (0, _wrapValidator[\"default\"])(validator, 'numericString');\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,iBAAiB,GAAG,iDAA1B;;AAEA,IAAMC,SAAS,GAAG,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAwCC,aAAxC,EAAgE;AAChF,MAAIF,KAAK,CAACC,QAAD,CAALD,IAAmB,IAAvB,EAA6B;AAC3B,WAAO,IAAP;AACD;;AAH+E,oCAANG,IAAM;AAANA,QAAM,UAANA,GAAMC,eAAND;AAAM;;AAKhF,MAAME,WAAW,GAAGC,iCAAON,KAAPM,EAAcL,QAAdK,EAAwBJ,aAAxBI,SAA0CH,IAA1CG,EAApB;;AACA,MAAID,WAAJ,EAAiB;AACf,WAAOA,WAAP;AACD;;AAED,MAAME,KAAK,GAAGP,KAAK,CAACC,QAAD,CAAnB;AAEA,MAAMO,WAAW,GAAGX,iBAAiB,CAACY,IAAlBZ,CAAuBU,KAAvBV,CAApB;;AACA,MAAIW,WAAJ,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,SAAO,IAAIE,SAAJ,WAAiBR,aAAjB,sBAAyCD,QAAzC,yBAA8DM,KAA9D,iSAAP;AAjBF;;AA0BAT,SAAS,CAACa,UAAVb,GAAuB,SAASc,qBAAT,CAA+BZ,KAA/B,EAAsCC,QAAtC,EAAgDC,aAAhD,EAAwE;AAC7F,MAAIF,KAAK,CAACC,QAAD,CAALD,IAAmB,IAAvB,EAA6B;AAC3B,WAAO,IAAIU,SAAJ,WAAiBR,aAAjB,eAAmCD,QAAnC,kBAAP;AACD;;AAH4F,qCAANE,IAAM;AAANA,QAAM,WAANA,GAAMC,gBAAND;AAAM;;AAI7F,SAAOL,SAAS,MAATA,UAAUE,KAAV,EAAiBC,QAAjB,EAA2BC,aAA3B,SAA6CC,IAA7C,EAAP;AAJF;;eAOe;AAAA,SAAM,+BAAcL,SAAd,EAAyB,eAAzB,CAAN","names":["validNumericChars","validator","numericString","props","propName","componentName","rest","arguments","stringError","string","value","passesRegex","test","TypeError","isRequired","numericStringRequired"],"sources":["/home/marboi/Work/dotnet/NoDo/client/node_modules/react-outside-click-handler/node_modules/airbnb-prop-types/src/numericString.js"],"sourcesContent":["import { string } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nconst validNumericChars = /^[-+]?(?:[1-9][0-9]*(?:\\.[0-9]+)?|0|0\\.[0-9]+)$/;\n\nconst validator = function numericString(props, propName, componentName, ...rest) {\n  if (props[propName] == null) {\n    return null;\n  }\n\n  const stringError = string(props, propName, componentName, ...rest);\n  if (stringError) {\n    return stringError;\n  }\n\n  const value = props[propName];\n\n  const passesRegex = validNumericChars.test(value);\n  if (passesRegex) {\n    return null;\n  }\n\n  return new TypeError(`${componentName}: prop \"${propName}\" (value \"${value}\") must be a numeric string:\n    - starting with an optional + or -\n    - that does not have a leading zero\n    - with an optional decimal part (that contains only one decimal point, if present)\n    - that otherwise only contains digits (0-9)\n    - not +-NaN, or +-Infinity\n  `);\n};\n\nvalidator.isRequired = function numericStringRequired(props, propName, componentName, ...rest) {\n  if (props[propName] == null) {\n    return new TypeError(`${componentName}: ${propName} is required`);\n  }\n  return validator(props, propName, componentName, ...rest);\n};\n\nexport default () => wrapValidator(validator, 'numericString');\n"]},"metadata":{},"sourceType":"script"}