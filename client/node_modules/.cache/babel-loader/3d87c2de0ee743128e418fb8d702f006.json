{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = mutuallyExclusiveTrue;\n\nvar _propTypes = require(\"prop-types\");\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction mutuallyExclusiveTrue() {\n  for (var _len = arguments.length, exclusiveProps = new Array(_len), _key = 0; _key < _len; _key++) {\n    exclusiveProps[_key] = arguments[_key];\n  }\n\n  if (exclusiveProps.length < 1) {\n    throw new TypeError('at least one prop that is mutually exclusive is required');\n  }\n\n  if (!exclusiveProps.every(function (x) {\n    return typeof x === 'string';\n  })) {\n    throw new TypeError('all exclusive true props must be strings');\n  }\n\n  var propsList = exclusiveProps.join(', or ');\n\n  var validator = function mutuallyExclusiveTrueProps(props, propName, componentName) {\n    var countProps = function countProps(count, prop) {\n      return count + (props[prop] ? 1 : 0);\n    };\n\n    var exclusivePropCount = exclusiveProps.reduce(countProps, 0);\n\n    if (exclusivePropCount > 1) {\n      return new Error(\"A \".concat(componentName, \" cannot have more than one of these boolean props be true: \").concat(propsList));\n    }\n\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      rest[_key2 - 3] = arguments[_key2];\n    }\n\n    return _propTypes.bool.apply(void 0, [props, propName, componentName].concat(rest));\n  };\n\n  validator.isRequired = function mutuallyExclusiveTruePropsRequired(props, propName, componentName) {\n    var countProps = function countProps(count, prop) {\n      return count + (props[prop] ? 1 : 0);\n    };\n\n    var exclusivePropCount = exclusiveProps.reduce(countProps, 0);\n\n    if (exclusivePropCount > 1) {\n      return new Error(\"A \".concat(componentName, \" cannot have more than one of these boolean props be true: \").concat(propsList));\n    }\n\n    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      rest[_key3 - 3] = arguments[_key3];\n    }\n\n    return _propTypes.bool.isRequired.apply(_propTypes.bool, [props, propName, componentName].concat(rest));\n  };\n\n  return (0, _wrapValidator[\"default\"])(validator, \"mutuallyExclusiveTrueProps: \".concat(propsList), exclusiveProps);\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEe,SAASA,qBAAT,GAAkD;AAAA,oCAAhBC,cAAgB;AAAhBA,kBAAgB,MAAhBA,GAAgBC,eAAhBD;AAAgB;;AAC/D,MAAIA,cAAc,CAACE,MAAfF,GAAwB,CAA5B,EAA+B;AAC7B,UAAM,IAAIG,SAAJ,CAAc,0DAAd,CAAN;AACD;;AACD,MAAI,CAACH,cAAc,CAACI,KAAfJ,CAAqB,UAACK,CAAD;AAAA,WAAO,OAAOA,CAAP,KAAa,QAApB;AAArB,IAAL,EAAyD;AACvD,UAAM,IAAIF,SAAJ,CAAc,0CAAd,CAAN;AACD;;AAED,MAAMG,SAAS,GAAGN,cAAc,CAACO,IAAfP,CAAoB,OAApBA,CAAlB;;AAEA,MAAMQ,SAAS,GAAG,SAASC,0BAAT,CAAoCC,KAApC,EAA2CC,QAA3C,EAAqDC,aAArD,EAA6E;AAC7F,QAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAQC,IAAR;AAAA,aAAkBD,KAAK,IAAIJ,KAAK,CAACK,IAAD,CAALL,GAAc,CAAdA,GAAkB,CAAtB,CAAvB;AAAnB;;AAEA,QAAMM,kBAAkB,GAAGhB,cAAc,CAACiB,MAAfjB,CAAsBa,UAAtBb,EAAkC,CAAlCA,CAA3B;;AACA,QAAIgB,kBAAkB,GAAG,CAAzB,EAA4B;AAC1B,aAAO,IAAIE,KAAJ,aAAeN,aAAf,wEAA0FN,SAA1F,EAAP;AACD;;AAN4F,uCAANa,IAAM;AAANA,UAAM,WAANA,GAAMlB,gBAANkB;AAAM;;AAO7F,WAAOC,+BAAKV,KAALU,EAAYT,QAAZS,EAAsBR,aAAtBQ,SAAwCD,IAAxCC,EAAP;AAPF;;AAUAZ,WAAS,CAACa,UAAVb,GAAuB,SAASc,kCAAT,CACrBZ,KADqB,EAErBC,QAFqB,EAGrBC,aAHqB,EAKrB;AACA,QAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAQC,IAAR;AAAA,aAAkBD,KAAK,IAAIJ,KAAK,CAACK,IAAD,CAALL,GAAc,CAAdA,GAAkB,CAAtB,CAAvB;AAAnB;;AAEA,QAAMM,kBAAkB,GAAGhB,cAAc,CAACiB,MAAfjB,CAAsBa,UAAtBb,EAAkC,CAAlCA,CAA3B;;AACA,QAAIgB,kBAAkB,GAAG,CAAzB,EAA4B;AAC1B,aAAO,IAAIE,KAAJ,aAAeN,aAAf,wEAA0FN,SAA1F,EAAP;AACD;;AAND,uCADGa,IACH;AADGA,UACH,WADGA,GACHlB,gBADGkB;AACH;;AAOA,WAAOC,gBAAKC,UAALD,yBAAgBV,KAAhB,EAAuBC,QAAvB,EAAiCC,aAAjC,SAAmDO,IAAnD,EAAP;AAZF;;AAeA,SAAO,+BAAcX,SAAd,wCAAwDF,SAAxD,GAAqEN,cAArE,CAAP;AACD","names":["mutuallyExclusiveTrue","exclusiveProps","arguments","length","TypeError","every","x","propsList","join","validator","mutuallyExclusiveTrueProps","props","propName","componentName","countProps","count","prop","exclusivePropCount","reduce","Error","rest","bool","isRequired","mutuallyExclusiveTruePropsRequired"],"sources":["/home/marboi/Work/dotnet/NoDo/client/node_modules/react-outside-click-handler/node_modules/airbnb-prop-types/src/mutuallyExclusiveTrueProps.js"],"sourcesContent":["import { bool } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function mutuallyExclusiveTrue(...exclusiveProps) {\n  if (exclusiveProps.length < 1) {\n    throw new TypeError('at least one prop that is mutually exclusive is required');\n  }\n  if (!exclusiveProps.every((x) => typeof x === 'string')) {\n    throw new TypeError('all exclusive true props must be strings');\n  }\n\n  const propsList = exclusiveProps.join(', or ');\n\n  const validator = function mutuallyExclusiveTrueProps(props, propName, componentName, ...rest) {\n    const countProps = (count, prop) => (count + (props[prop] ? 1 : 0));\n\n    const exclusivePropCount = exclusiveProps.reduce(countProps, 0);\n    if (exclusivePropCount > 1) {\n      return new Error(`A ${componentName} cannot have more than one of these boolean props be true: ${propsList}`);\n    }\n    return bool(props, propName, componentName, ...rest);\n  };\n\n  validator.isRequired = function mutuallyExclusiveTruePropsRequired(\n    props,\n    propName,\n    componentName,\n    ...rest\n  ) {\n    const countProps = (count, prop) => (count + (props[prop] ? 1 : 0));\n\n    const exclusivePropCount = exclusiveProps.reduce(countProps, 0);\n    if (exclusivePropCount > 1) {\n      return new Error(`A ${componentName} cannot have more than one of these boolean props be true: ${propsList}`);\n    }\n    return bool.isRequired(props, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(validator, `mutuallyExclusiveTrueProps: ${propsList}`, exclusiveProps);\n}\n"]},"metadata":{},"sourceType":"script"}