{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = uniqueArrayOfTypeValidator;\n\nvar _propTypes = require(\"prop-types\");\n\nvar _and = _interopRequireDefault(require(\"./and\"));\n\nvar _uniqueArray = _interopRequireDefault(require(\"./uniqueArray\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar unique = (0, _uniqueArray[\"default\"])();\n\nfunction uniqueArrayOfTypeValidator(type) {\n  if (typeof type !== 'function') {\n    throw new TypeError('type must be a validator function');\n  }\n\n  var mapper = null;\n  var name = 'uniqueArrayOfType';\n\n  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n\n  if (rest.length === 1) {\n    if (typeof rest[0] === 'function') {\n      mapper = rest[0];\n    } else if (typeof rest[0] === 'string') {\n      name = rest[0];\n    } else {\n      throw new TypeError('single input must either be string or function');\n    }\n  } else if (rest.length === 2) {\n    if (typeof rest[0] === 'function' && typeof rest[1] === 'string') {\n      mapper = rest[0];\n      name = rest[1];\n    } else {\n      throw new TypeError('multiple inputs must be in [function, string] order');\n    }\n  } else if (rest.length > 2) {\n    throw new TypeError('only [], [name], [mapper], and [mapper, name] are valid inputs');\n  }\n\n  function uniqueArrayOfMapped(props, propName) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return null;\n    }\n\n    var values = propValue.map(mapper);\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    return unique.apply(void 0, [_objectSpread(_objectSpread({}, props), {}, _defineProperty({}, propName, values)), propName].concat(args));\n  }\n\n  uniqueArrayOfMapped.isRequired = function isRequired(props, propName) {\n    var propValue = props[propName];\n\n    for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      args[_key3 - 2] = arguments[_key3];\n    }\n\n    if (propValue == null) {\n      return _propTypes.array.isRequired.apply(_propTypes.array, [props, propName].concat(args));\n    }\n\n    return uniqueArrayOfMapped.apply(void 0, [props, propName].concat(args));\n  };\n\n  var arrayValidator = (0, _propTypes.arrayOf)(type);\n  var uniqueValidator = mapper ? uniqueArrayOfMapped : unique;\n  var validator = (0, _and[\"default\"])([arrayValidator, uniqueValidator], name);\n  validator.isRequired = (0, _and[\"default\"])([uniqueValidator.isRequired, arrayValidator.isRequired], \"\".concat(name, \".isRequired\"));\n  return validator;\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,MAAM,GAAG,8BAAf;;AAEe,SAASC,0BAAT,CAAoCC,IAApC,EAAmD;AAChE,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AACD;;AAED,MAAIC,MAAM,GAAG,IAAb;AACA,MAAIC,IAAI,GAAG,mBAAX;;AANgE,oCAANC,IAAM;AAANA,QAAM,UAANA,GAAMC,eAAND;AAAM;;AAQhE,MAAIA,IAAI,CAACE,MAALF,KAAgB,CAApB,EAAuB;AACrB,QAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,UAAvB,EAAmC;AAC/BF,YAD+B,GACrBE,IADqB,GAC/BF;AADJ,WAEO,IAAI,OAAOE,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AACpCD,UADoC,GAC5BC,IAD4B,GACpCD;AADG,WAEA;AACL,YAAM,IAAIF,SAAJ,CAAc,gDAAd,CAAN;AACD;AAPH,SAQO,IAAIG,IAAI,CAACE,MAALF,KAAgB,CAApB,EAAuB;AAC5B,QAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,UAAnB,IAAiC,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAxD,EAAkE;AAC9DF,YAD8D,GAC9CE,IAD8C,GAC9DF;AAAQC,UADsD,GAC9CC,IAD8C,GACtDD;AADZ,WAEO;AACL,YAAM,IAAIF,SAAJ,CAAc,qDAAd,CAAN;AACD;AALI,SAMA,IAAIG,IAAI,CAACE,MAALF,GAAc,CAAlB,EAAqB;AAC1B,UAAM,IAAIH,SAAJ,CAAc,gEAAd,CAAN;AACD;;AAED,WAASM,mBAAT,CAA6BC,KAA7B,EAAoCC,QAApC,EAAuD;AAAA,QACjCC,SADiC,GACnBF,KADmB,CAC5CC,QAD4C;;AAErD,QAAIC,SAAS,IAAI,IAAjB,EAAuB;AACrB,aAAO,IAAP;AACD;;AAED,QAAMC,MAAM,GAAGD,SAAS,CAACE,GAAVF,CAAcR,MAAdQ,CAAf;;AANqD,uCAANG,IAAM;AAANA,UAAM,WAANA,GAAMR,gBAANQ;AAAM;;AAOrD,WAAOf,MAAM,MAANA,0CAAYU,KAAZ,2BAAoBC,QAApB,EAA+BE,MAA/B,IAAyCF,QAAzC,SAAsDI,IAAtD,EAAP;AACD;;AAEDN,qBAAmB,CAACO,UAApBP,GAAiC,SAASO,UAAT,CAAoBN,KAApB,EAA2BC,QAA3B,EAA8C;AAAA,QACzDC,SADyD,GAC3CF,KAD2C,CACpEC,QADoE;;AAAA,uCAANI,IAAM;AAANA,UAAM,WAANA,GAAMR,gBAANQ;AAAM;;AAE7E,QAAIH,SAAS,IAAI,IAAjB,EAAuB;AACrB,aAAOK,iBAAMD,UAANC,0BAAiBP,KAAjB,EAAwBC,QAAxB,SAAqCI,IAArC,EAAP;AACD;;AACD,WAAON,mBAAmB,MAAnBA,UAAoBC,KAApB,EAA2BC,QAA3B,SAAwCI,IAAxC,EAAP;AALF;;AAQA,MAAMG,cAAc,GAAG,wBAAQhB,IAAR,CAAvB;AAEA,MAAMiB,eAAe,GAAGf,MAAM,GAAGK,mBAAH,GAAyBT,MAAvD;AAEA,MAAMoB,SAAS,GAAG,qBAAI,CAACF,cAAD,EAAiBC,eAAjB,CAAJ,EAAuCd,IAAvC,CAAlB;AACAe,WAAS,CAACJ,UAAVI,GAAuB,qBAAI,CACzBD,eAAe,CAACH,UADS,EAEzBE,cAAc,CAACF,UAFU,CAAJ,YAGjBX,IAHiB,iBAAvBe;AAKA,SAAOA,SAAP;AACD","names":["unique","uniqueArrayOfTypeValidator","type","TypeError","mapper","name","rest","arguments","length","uniqueArrayOfMapped","props","propName","propValue","values","map","args","isRequired","array","arrayValidator","uniqueValidator","validator"],"sources":["/home/marboi/Work/dotnet/NoDo/client/node_modules/react-outside-click-handler/node_modules/airbnb-prop-types/src/uniqueArrayOf.js"],"sourcesContent":["import { arrayOf, array } from 'prop-types';\nimport and from './and';\nimport uniqueArray from './uniqueArray';\n\nconst unique = uniqueArray();\n\nexport default function uniqueArrayOfTypeValidator(type, ...rest) {\n  if (typeof type !== 'function') {\n    throw new TypeError('type must be a validator function');\n  }\n\n  let mapper = null;\n  let name = 'uniqueArrayOfType';\n\n  if (rest.length === 1) {\n    if (typeof rest[0] === 'function') {\n      ([mapper] = rest);\n    } else if (typeof rest[0] === 'string') {\n      ([name] = rest);\n    } else {\n      throw new TypeError('single input must either be string or function');\n    }\n  } else if (rest.length === 2) {\n    if (typeof rest[0] === 'function' && typeof rest[1] === 'string') {\n      ([mapper, name] = rest);\n    } else {\n      throw new TypeError('multiple inputs must be in [function, string] order');\n    }\n  } else if (rest.length > 2) {\n    throw new TypeError('only [], [name], [mapper], and [mapper, name] are valid inputs');\n  }\n\n  function uniqueArrayOfMapped(props, propName, ...args) {\n    const { [propName]: propValue } = props;\n    if (propValue == null) {\n      return null;\n    }\n\n    const values = propValue.map(mapper);\n    return unique({ ...props, [propName]: values }, propName, ...args);\n  }\n\n  uniqueArrayOfMapped.isRequired = function isRequired(props, propName, ...args) {\n    const { [propName]: propValue } = props;\n    if (propValue == null) {\n      return array.isRequired(props, propName, ...args);\n    }\n    return uniqueArrayOfMapped(props, propName, ...args);\n  };\n\n  const arrayValidator = arrayOf(type);\n\n  const uniqueValidator = mapper ? uniqueArrayOfMapped : unique;\n\n  const validator = and([arrayValidator, uniqueValidator], name);\n  validator.isRequired = and([\n    uniqueValidator.isRequired,\n    arrayValidator.isRequired,\n  ], `${name}.isRequired`);\n\n  return validator;\n}\n"]},"metadata":{},"sourceType":"script"}